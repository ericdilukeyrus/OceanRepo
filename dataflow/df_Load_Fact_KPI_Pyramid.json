{
	"name": "df_Load_Fact_KPI_Pyramid",
	"properties": {
		"folder": {
			"name": "03DWH"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ocean_stg",
						"type": "DatasetReference"
					},
					"name": "getMBRKPIPyramidStaging"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimScenario"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimOrganisation"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getFactKpi"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "insertFactKPIPyramid"
				}
			],
			"transformations": [
				{
					"name": "addYearMonthID"
				},
				{
					"name": "joinDimScenario"
				},
				{
					"name": "joinDimOrganisation"
				},
				{
					"name": "cleanColumns"
				},
				{
					"name": "joinFactKPI"
				},
				{
					"name": "insertOrUpdate"
				},
				{
					"name": "includeUpsert"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BU as string,",
				"          Version as string,",
				"          Period as date,",
				"          CostCenter as string,",
				"          PeopleType as string,",
				"          LevelSeniority as string,",
				"          EndOfMonth_FTE as float,",
				"          SrvcSales_bef_bonimali as float,",
				"          BillableDays as float,",
				"          DailyRate as float,",
				"          AnnualDirectCosts as float,",
				"          AnnualProductionDays as float,",
				"          DailyCost as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getMBRKPIPyramidStaging",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimScenario",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimOrganisation",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getFactKpi",
				"getMBRKPIPyramidStaging derive(MonthYearID = toInteger(concat(toString(year(Period)), lpad(toString(month(Period)),2,'0'), '01'))) ~> addYearMonthID",
				"addYearMonthID, getDimScenario join(lower(trim(Version)) == lower(trim(Scenario_Name0)),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimScenario",
				"joinDimScenario, getDimOrganisation join(lower(trim(BU)) == lower(trim({Business Unit})),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimOrganisation",
				"joinDimOrganisation select(mapColumn(",
				"          OrganisationID,",
				"          ScenarioID = Scenario_Index,",
				"          MonthYearID,",
				"          MonthYear = Period,",
				"          CostCenter,",
				"          PeopleType,",
				"          LevelSeniority,",
				"          EndOfMonth_FTE,",
				"          SrvcSales_bef_bonimali,",
				"          BillableDays,",
				"          DailyRate,",
				"          AnnualDirectCosts,",
				"          AnnualProductionDays,",
				"          DailyCost",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanColumns",
				"cleanColumns, getFactKpi join(cleanColumns@OrganisationID == getFactKpi@OrganisationID",
				"     && cleanColumns@ScenarioID == getFactKpi@ScenarioID",
				"     && cleanColumns@MonthYearID == getFactKpi@MonthYearID",
				"     && cleanColumns@CostCenter == getFactKpi@CostCenter",
				"     && cleanColumns@PeopleType == getFactKpi@PeopleType",
				"     && cleanColumns@LevelSeniority == getFactKpi@LevelSeniority,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFactKPI",
				"joinFactKPI derive(InsertOrUpdate = iifNull(isNull(getFactKpi@OrganisationID) && isNull(getFactKpi@ScenarioID) && isNull(getFactKpi@MonthYearID) && isNull(getFactKpi@CostCenter) && isNull(getFactKpi@PeopleType) \r",
				"&& isNull(getFactKpi@PeopleType) && isNull(getFactKpi@LevelSeniority),\r",
				"'I',\r",
				"'P')) ~> insertOrUpdate",
				"insertOrUpdate filter(in(InsertOrUpdate,'I')) ~> includeUpsert",
				"includeUpsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          OrganisationID = cleanColumns@OrganisationID,",
				"          ScenarioID = cleanColumns@ScenarioID,",
				"          MonthYearID = cleanColumns@MonthYearID,",
				"          MonthYear = cleanColumns@MonthYear,",
				"          CostCenter = cleanColumns@CostCenter,",
				"          PeopleType = cleanColumns@PeopleType,",
				"          LevelSeniority = cleanColumns@LevelSeniority,",
				"          EndOfMonth_FTE = cleanColumns@EndOfMonth_FTE,",
				"          SrvcSales_bef_bonimali = cleanColumns@SrvcSales_bef_bonimali,",
				"          BillableDays = cleanColumns@BillableDays,",
				"          DailyRate = cleanColumns@DailyRate,",
				"          AnnualDirectCosts = cleanColumns@AnnualDirectCosts,",
				"          AnnualProductionDays = cleanColumns@AnnualProductionDays,",
				"          DailyCost = cleanColumns@DailyCost",
				"     )) ~> insertFactKPIPyramid"
			]
		}
	}
}