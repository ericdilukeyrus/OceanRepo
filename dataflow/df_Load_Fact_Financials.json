{
	"name": "df_Load_Fact_Financials",
	"properties": {
		"folder": {
			"name": "03DWH"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ocean_stg",
						"type": "DatasetReference"
					},
					"name": "getMBRStagingData"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimScenario"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimNature"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimOrganisation"
				},
				{
					"dataset": {
						"referenceName": "ds_fact_financials",
						"type": "DatasetReference"
					},
					"name": "getFactFinancials"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getFactDrivers"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimKPI"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimCostCenter"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimCurrency"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_fact_financials",
						"type": "DatasetReference"
					},
					"name": "insertFactFinancials"
				},
				{
					"dataset": {
						"referenceName": "ds_fact_drivers",
						"type": "DatasetReference"
					},
					"name": "insertFactDrivers"
				}
			],
			"transformations": [
				{
					"name": "addColumns",
					"description": "Add MonthYearID"
				},
				{
					"name": "joinDimScenario",
					"description": "Inner join with 'getDimScenario'"
				},
				{
					"name": "getOrganizationID"
				},
				{
					"name": "joinDimOrganisation",
					"description": "Inner join on 'joinDimNature' and 'getOrganizationID'"
				},
				{
					"name": "cleanColumns"
				},
				{
					"name": "joinFactFinancials"
				},
				{
					"name": "factFinancialsClean"
				},
				{
					"name": "insertOrUpdateColumns"
				},
				{
					"name": "insertOrUpdate"
				},
				{
					"name": "includesUpsert"
				},
				{
					"name": "cleanColumnsToUpsert"
				},
				{
					"name": "convertToInteger",
					"description": "Convert Surrogate Key to Integer"
				},
				{
					"name": "FINorKPI"
				},
				{
					"name": "joinDimNature"
				},
				{
					"name": "factDriversClean"
				},
				{
					"name": "joinFactKPI"
				},
				{
					"name": "upsertColumn"
				},
				{
					"name": "includesUpsertKPI"
				},
				{
					"name": "cleanColumnsToUpsertKPI"
				},
				{
					"name": "insertOrUpdateKPI"
				},
				{
					"name": "joinDimKPI"
				},
				{
					"name": "joinDimCostCenter"
				},
				{
					"name": "currAddYearMonth"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pPipelineRunID as string",
				"}",
				"source(output(",
				"          BusinessUnit as string,",
				"          Scenario as string,",
				"          NatureID as integer,",
				"          Nature as string,",
				"          CurrencyCode as string,",
				"          CostCenterCode as string,",
				"          MonthYear as timestamp,",
				"          MonthYearID as integer,",
				"          MBR_Month as string,",
				"          Value as double,",
				"          ValueEuro as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getMBRStagingData",
				"source(output(",
				"          Scenario_Name0 as string,",
				"          Scenario_Code0 as string,",
				"          Comment as string,",
				"          Scenario_Index as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimScenario",
				"source(output(",
				"          NatureGroupID as long,",
				"          NatureGroup as string,",
				"          NatureSubGroupID as long,",
				"          NatureSubGroup as string,",
				"          Nature as string,",
				"          NatureID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimNature",
				"source(output(",
				"          {Business Unit} as string,",
				"          {MBR Scope} as string,",
				"          Area as string,",
				"          Zone as string,",
				"          {Keyrus Group} as string,",
				"          Total as string,",
				"          {MBR Scope_1} as string,",
				"          Management_hierarchy_1 as string,",
				"          Management_hierarchy_2 as string,",
				"          Management_hierarchy_3 as string,",
				"          Management_hierarchy_4 as string,",
				"          Currency_Name0 as string,",
				"          Currency_Code0 as string,",
				"          BusinessLine_Name as string,",
				"          Country_Name as string,",
				"          {Financial manager} as string,",
				"          {Managing Director} as string,",
				"          {MBR file user(s)} as string,",
				"          OrganisationID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimOrganisation",
				"source(output(",
				"          FactFinID as long,",
				"          ScenarioID as integer,",
				"          NatureID as integer,",
				"          OrganisationID as integer,",
				"          CostCenterID as integer,",
				"          MBRMonth as string,",
				"          MonthYearID as integer,",
				"          MonthYear as date,",
				"          CurrencyCode as string,",
				"          Value as double,",
				"          ValueEuro as double,",
				"          CreatedOn as timestamp,",
				"          CreatedBy as string,",
				"          ModifiedOn as timestamp,",
				"          ModifiedBy as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getFactFinancials",
				"source(output(",
				"          FactDriversID as long,",
				"          ScenarioID as integer,",
				"          OrganisationID as integer,",
				"          KPIID as integer,",
				"          CostCenterID as integer,",
				"          MBRMonth as string,",
				"          MonthYearID as integer,",
				"          MonthYear as date,",
				"          CurrencyCode as string,",
				"          Value as double,",
				"          ValueEuro as double,",
				"          CreatedOn as timestamp,",
				"          CreatedBy as string,",
				"          ModifiedOn as timestamp,",
				"          ModifiedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getFactDrivers",
				"source(output(",
				"          Index as long,",
				"          PeopleType as string,",
				"          PeopleTypeID as long,",
				"          KPI as string,",
				"          IsKPI as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimKPI",
				"source(output(",
				"          CostCenterID as integer,",
				"          Cost_center_Name0 as string,",
				"          Cost_Center_Code0 as string,",
				"          Cost_center_Name1 as string,",
				"          Cost_Center_Code1 as string,",
				"          Cost_center_Name2 as string,",
				"          Cost_Center_Code2 as string,",
				"          Cost_center_Name3 as string,",
				"          Cost_Center_Code3 as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimCostCenter",
				"source(output(",
				"          CurrencyID as long,",
				"          InputCurrency as string,",
				"          CurrencyPair as string,",
				"          MonthYear as timestamp,",
				"          Actual_LY as double,",
				"          Budget_CY as double,",
				"          Actual_CY as double,",
				"          Forecast_CY as double,",
				"          Forecast_NY as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimCurrency",
				"getMBRStagingData derive(CreatedBy = $pPipelineRunID) ~> addColumns",
				"addColumns, getDimScenario join(lower(trim(Scenario)) == lower(trim(Scenario_Name0)),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimScenario",
				"getDimOrganisation select(mapColumn(",
				"          {Business Unit},",
				"          OrganisationID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> getOrganizationID",
				"joinDimScenario, getOrganizationID join(lower(trim(BusinessUnit)) == lower(trim({Business Unit})),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimOrganisation",
				"joinDimCostCenter select(mapColumn(",
				"          ScenarioID = Scenario_Index,",
				"          OrganisationID,",
				"          NatureID,",
				"          CostCenterID,",
				"          MBRMonth = MBR_Month,",
				"          MonthYearID,",
				"          MonthYear,",
				"          CurrencyCode,",
				"          Value,",
				"          ValueEuro,",
				"          CreatedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanColumns",
				"joinDimNature, factFinancialsClean join(FINorKPI@FIN@ScenarioID == factFinancialsClean@ScenarioID",
				"     && getDimNature@NatureID == factFinancialsClean@NatureID",
				"     && FINorKPI@FIN@OrganisationID == factFinancialsClean@OrganisationID",
				"     && FINorKPI@FIN@MonthYearID == factFinancialsClean@MonthYearID",
				"     && FINorKPI@FIN@CostCenterID == factFinancialsClean@CostCenterID",
				"     && FINorKPI@FIN@MBRMonth == factFinancialsClean@MBRMonth",
				"     && FINorKPI@FIN@CurrencyCode == factFinancialsClean@CurrencyCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFactFinancials",
				"getFactFinancials select(mapColumn(",
				"          ScenarioID,",
				"          NatureID,",
				"          OrganisationID,",
				"          CostCenterID,",
				"          MBRMonth,",
				"          MonthYearID,",
				"          CurrencyCode,",
				"          Value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> factFinancialsClean",
				"joinFactFinancials derive(InsertOrUpdate = iif(\r",
				"    isNull(factFinancialsClean@ScenarioID) && \r",
				"    isNull(factFinancialsClean@NatureID) && \r",
				"    isNull(factFinancialsClean@OrganisationID) && \r",
				"    isNull(factFinancialsClean@CostCenterID) && \r",
				"    isNull(factFinancialsClean@MonthYearID) &&\r",
				"    isNull(factFinancialsClean@CurrencyCode) &&\r",
				"    isNull(factFinancialsClean@MBRMonth)\r",
				", 'I',\r",
				"iif(FINorKPI@FIN@Value == factFinancialsClean@Value, 'P','U')\r",
				")) ~> insertOrUpdateColumns",
				"cleanColumnsToUpsert alterRow(insertIf(InsertOrUpdate=='I'),",
				"     updateIf(InsertOrUpdate=='U')) ~> insertOrUpdate",
				"insertOrUpdateColumns filter(in(['I','U'],InsertOrUpdate)) ~> includesUpsert",
				"includesUpsert select(mapColumn(",
				"          ScenarioID = FINorKPI@FIN@ScenarioID,",
				"          OrganisationID = FINorKPI@FIN@OrganisationID,",
				"          NatureID = FINorKPI@FIN@NatureID,",
				"          CostCenterID = FINorKPI@FIN@CostCenterID,",
				"          MBRMonth = FINorKPI@FIN@MBRMonth,",
				"          MonthYearID = FINorKPI@FIN@MonthYearID,",
				"          MonthYear,",
				"          CurrencyCode = FINorKPI@FIN@CurrencyCode,",
				"          Value = FINorKPI@FIN@Value,",
				"          ValueEuro,",
				"          CreatedBy,",
				"          InsertOrUpdate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanColumnsToUpsert",
				"cleanColumns derive(ScenarioID = toInteger(ScenarioID),",
				"          OrganisationID = toInteger(OrganisationID),",
				"          CostCenterID = iifNull(CostCenterID, -1, CostCenterID),",
				"          FactIndicator = iif(NatureID >= 372, 'KPI', 'FIN')) ~> convertToInteger",
				"convertToInteger split(FactIndicator == 'FIN',",
				"     disjoint: false) ~> FINorKPI@(FIN, KPI)",
				"FINorKPI@FIN, getDimNature join(FINorKPI@FIN@NatureID == getDimNature@NatureID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimNature",
				"getFactDrivers select(mapColumn(",
				"          ScenarioID,",
				"          KPIID,",
				"          OrganisationID,",
				"          CostCenterID,",
				"          MonthYearID,",
				"          CurrencyCode,",
				"          Value,",
				"          MBRMonth",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> factDriversClean",
				"joinDimKPI, factDriversClean join(FINorKPI@KPI@ScenarioID == factDriversClean@ScenarioID",
				"     && FINorKPI@KPI@OrganisationID == factDriversClean@OrganisationID",
				"     && Index == KPIID",
				"     && FINorKPI@KPI@MonthYearID == factDriversClean@MonthYearID",
				"     && FINorKPI@KPI@CostCenterID == factDriversClean@CostCenterID",
				"     && FINorKPI@KPI@MBRMonth == factDriversClean@MBRMonth",
				"     && FINorKPI@KPI@CurrencyCode == factDriversClean@CurrencyCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFactKPI",
				"joinFactKPI derive(InsertOrUpdate = iif(\r",
				"    isNull(factDriversClean@ScenarioID) && \r",
				"    isNull(KPIID) && \r",
				"    isNull(factDriversClean@OrganisationID) && \r",
				"    isNull(factDriversClean@MonthYearID) &&\r",
				"    isNull(factDriversClean@CostCenterID) &&\r",
				"    isNull(factDriversClean@CurrencyCode)&&\r",
				"    isNull(factDriversClean@MBRMonth)\r",
				"    , \r",
				"'I',iif(FINorKPI@KPI@Value == factDriversClean@Value, 'P','U'))) ~> upsertColumn",
				"upsertColumn filter(in(['I','U'],InsertOrUpdate)) ~> includesUpsertKPI",
				"includesUpsertKPI select(mapColumn(",
				"          ScenarioID = FINorKPI@KPI@ScenarioID,",
				"          OrganisationID = FINorKPI@KPI@OrganisationID,",
				"          KPIID = NatureID,",
				"          CostCenterID = FINorKPI@KPI@CostCenterID,",
				"          MBRMonth = FINorKPI@KPI@MBRMonth,",
				"          MonthYearID = FINorKPI@KPI@MonthYearID,",
				"          MonthYear,",
				"          CurrencyCode = FINorKPI@KPI@CurrencyCode,",
				"          Value = FINorKPI@KPI@Value,",
				"          ValueEuro,",
				"          CreatedBy,",
				"          InsertOrUpdate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanColumnsToUpsertKPI",
				"cleanColumnsToUpsertKPI alterRow(insertIf(InsertOrUpdate=='I'),",
				"     updateIf(InsertOrUpdate=='U')) ~> insertOrUpdateKPI",
				"FINorKPI@KPI, getDimKPI join(NatureID == Index,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimKPI",
				"joinDimOrganisation, getDimCostCenter join(lower(trim(CostCenterCode)) == lower(trim(Cost_Center_Code0)),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimCostCenter",
				"getDimCurrency derive(MonthYearID = toInteger(concat(toString(year(MonthYear)), lpad(toString(month(MonthYear)),2,'0'), '01'))) ~> currAddYearMonth",
				"insertOrUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FactFinID as long,",
				"          ScenarioID as integer,",
				"          NatureID as integer,",
				"          OrganisationID as integer,",
				"          CostCenterID as integer,",
				"          MBRMonth as string,",
				"          MonthYearID as integer,",
				"          MonthYear as date,",
				"          CurrencyCode as string,",
				"          Value as double,",
				"          ValueEuro as double,",
				"          CreatedOn as timestamp,",
				"          CreatedBy as string,",
				"          ModifiedOn as timestamp,",
				"          ModifiedBy as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ScenarioID,",
				"          NatureID,",
				"          OrganisationID,",
				"          CostCenterID,",
				"          MBRMonth,",
				"          MonthYearID,",
				"          MonthYear,",
				"          CurrencyCode,",
				"          Value,",
				"          ValueEuro,",
				"          CreatedBy",
				"     )) ~> insertFactFinancials",
				"insertOrUpdateKPI sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FactDriversID as long,",
				"          ScenarioID as integer,",
				"          OrganisationID as integer,",
				"          KPIID as integer,",
				"          CostCenterID as integer,",
				"          MBRMonth as string,",
				"          MonthYearID as integer,",
				"          MonthYear as date,",
				"          CurrencyCode as string,",
				"          Value as double,",
				"          ValueEuro as double,",
				"          CreatedOn as timestamp,",
				"          CreatedBy as string,",
				"          ModifiedOn as timestamp,",
				"          ModifiedBy as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ScenarioID,",
				"          OrganisationID,",
				"          KPIID,",
				"          CostCenterID,",
				"          MBRMonth,",
				"          MonthYearID,",
				"          MonthYear,",
				"          CurrencyCode,",
				"          Value,",
				"          ValueEuro,",
				"          CreatedBy",
				"     )) ~> insertFactDrivers"
			]
		}
	}
}