{
	"name": "df_Load_Fact_Financials",
	"properties": {
		"folder": {
			"name": "EDI"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ocean_stg",
						"type": "DatasetReference"
					},
					"name": "getMBRStagingData"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimScenario"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimNature"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimOrganisation"
				},
				{
					"dataset": {
						"referenceName": "ds_fact_tables",
						"type": "DatasetReference"
					},
					"name": "getFactData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_fact_tables",
						"type": "DatasetReference"
					},
					"name": "insertFactFinancials"
				},
				{
					"dataset": {
						"referenceName": "ds_fact_tables",
						"type": "DatasetReference"
					},
					"name": "insertFactKPI"
				}
			],
			"transformations": [
				{
					"name": "addYearMonthID",
					"description": "Add MonthYearID"
				},
				{
					"name": "joinDimScenario",
					"description": "Inner join with 'getDimScenario'"
				},
				{
					"name": "getOrganizationID"
				},
				{
					"name": "joinDimOrganisation",
					"description": "Inner join on 'joinDimNature' and 'getOrganizationID'"
				},
				{
					"name": "cleanColumns"
				},
				{
					"name": "joinFactFinancials"
				},
				{
					"name": "factDataClean"
				},
				{
					"name": "insertOrUpdateColumns"
				},
				{
					"name": "insertOrUpdate"
				},
				{
					"name": "includesUpsert"
				},
				{
					"name": "cleanColumnsToUpsert"
				},
				{
					"name": "convertToInteger",
					"description": "Convert Surrogate Key to Integer"
				},
				{
					"name": "FINorKPI"
				},
				{
					"name": "joinDimNature"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BusinessUnit as string,",
				"          Scenario as string,",
				"          NatureID as integer,",
				"          Nature as string,",
				"          MonthYear as timestamp,",
				"          Value as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getMBRStagingData",
				"source(output(",
				"          Scenario_Name0 as string,",
				"          Scenario_Code0 as string,",
				"          Comment as string,",
				"          Scenario_Index as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimScenario",
				"source(output(",
				"          NatureGroupID as long,",
				"          NatureGroup as string,",
				"          NatureSubGroupID as long,",
				"          NatureSubGroup as string,",
				"          Nature as string,",
				"          NatureID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimNature",
				"source(output(",
				"          {Business Unit} as string,",
				"          {MBR Scope} as string,",
				"          Area as string,",
				"          Zone as string,",
				"          {Keyrus Group} as string,",
				"          Total as string,",
				"          {MBR Scope_1} as string,",
				"          Management_hierarchy_1 as string,",
				"          Management_hierarchy_2 as string,",
				"          Management_hierarchy_3 as string,",
				"          Management_hierarchy_4 as string,",
				"          Currency_Name0 as string,",
				"          Currency_Code0 as string,",
				"          BusinessLine_Name as string,",
				"          Country_Name as string,",
				"          {Financial manager} as string,",
				"          {Managing Director} as string,",
				"          {MBR file user(s)} as string,",
				"          OrganisationID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimOrganisation",
				"source(output(",
				"          FactFinID as long,",
				"          ScenarioID as integer,",
				"          NatureID as integer,",
				"          OrganisationID as integer,",
				"          MonthYearID as integer,",
				"          MonthYear as date,",
				"          Value as double,",
				"          CreatedOn as timestamp,",
				"          CreatedBy as string,",
				"          ModifiedOn as timestamp,",
				"          ModifiedBy as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getFactData",
				"getMBRStagingData derive(MonthYearID = toInteger(concat(toString(year(MonthYear)), lpad(toString(month(MonthYear)),2,'0'), '01'))) ~> addYearMonthID",
				"addYearMonthID, getDimScenario join(Scenario == Scenario_Name0,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimScenario",
				"getDimOrganisation select(mapColumn(",
				"          {Business Unit},",
				"          OrganisationID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> getOrganizationID",
				"joinDimScenario, getOrganizationID join(BusinessUnit == {Business Unit},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimOrganisation",
				"joinDimOrganisation select(mapColumn(",
				"          ScenarioID = Scenario_Index,",
				"          OrganisationID,",
				"          NatureID,",
				"          MonthYearID,",
				"          MonthYear,",
				"          Value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanColumns",
				"joinDimNature, factDataClean join(convertToInteger@ScenarioID == factDataClean@ScenarioID",
				"     && convertToInteger@NatureID == factDataClean@NatureID",
				"     && convertToInteger@OrganisationID == factDataClean@OrganisationID",
				"     && cleanColumns@MonthYearID == factDataClean@MonthYearID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFactFinancials",
				"getFactData select(mapColumn(",
				"          ScenarioID,",
				"          NatureID,",
				"          OrganisationID,",
				"          MonthYearID,",
				"          Value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> factDataClean",
				"joinFactFinancials derive(InsertOrUpdate = iif(isNull(factDataClean@ScenarioID) && isNull(factDataClean@NatureID) && isNull(factDataClean@OrganisationID) && isNull(factDataClean@MonthYearID) \r",
				", 'I',\r",
				"iif(FINorKPI@FIN@Value == factDataClean@Value, 'P','U')\r",
				")) ~> insertOrUpdateColumns",
				"cleanColumnsToUpsert alterRow(insertIf(InsertOrUpdate=='I'),",
				"     updateIf(InsertOrUpdate=='U')) ~> insertOrUpdate",
				"insertOrUpdateColumns filter(in(['I','U'],InsertOrUpdate)) ~> includesUpsert",
				"includesUpsert select(mapColumn(",
				"          ScenarioID = FINorKPI@FIN@ScenarioID,",
				"          OrganisationID = FINorKPI@FIN@OrganisationID,",
				"          NatureID = getDimNature@NatureID,",
				"          MonthYearID = FINorKPI@FIN@MonthYearID,",
				"          MonthYear,",
				"          Value = FINorKPI@FIN@Value,",
				"          InsertOrUpdate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanColumnsToUpsert",
				"cleanColumns derive(ScenarioID = toInteger(ScenarioID),",
				"          OrganisationID = toInteger(OrganisationID),",
				"          FactIndicator = iif(NatureID >= 372, 'KPI', 'FIN') ) ~> convertToInteger",
				"convertToInteger split(FactIndicator == 'FIN',",
				"     disjoint: false) ~> FINorKPI@(FIN, KPI)",
				"FINorKPI@FIN, getDimNature join(FINorKPI@FIN@NatureID == getDimNature@NatureID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimNature",
				"insertOrUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FactFinID as long,",
				"          ScenarioID as integer,",
				"          NatureID as integer,",
				"          OrganisationID as integer,",
				"          MonthYearID as integer,",
				"          MonthYear as date,",
				"          Value as double,",
				"          CreatedOn as timestamp,",
				"          CreatedBy as string,",
				"          ModifiedOn as timestamp,",
				"          ModifiedBy as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ScenarioID','NatureID','OrganisationID','MonthYearID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ScenarioID,",
				"          NatureID,",
				"          OrganisationID,",
				"          MonthYearID,",
				"          MonthYear,",
				"          Value",
				"     )) ~> insertFactFinancials",
				"FINorKPI@KPI sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FactFinID as long,",
				"          ScenarioID as integer,",
				"          NatureID as integer,",
				"          OrganisationID as integer,",
				"          MonthYearID as integer,",
				"          MonthYear as date,",
				"          Value as double,",
				"          CreatedOn as timestamp,",
				"          CreatedBy as string,",
				"          ModifiedOn as timestamp,",
				"          ModifiedBy as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ScenarioID,",
				"          NatureID,",
				"          OrganisationID,",
				"          MonthYearID,",
				"          MonthYear,",
				"          Value",
				"     )) ~> insertFactKPI"
			]
		}
	}
}