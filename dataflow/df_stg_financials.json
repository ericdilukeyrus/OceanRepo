{
	"name": "df_stg_financials",
	"properties": {
		"folder": {
			"name": "02STG"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ocean_ods",
						"type": "DatasetReference"
					},
					"name": "getMBRUnpvtData"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDimConversionRate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stg_financials",
						"type": "DatasetReference"
					},
					"name": "insertMBRStagingData"
				}
			],
			"transformations": [
				{
					"name": "addColumns",
					"description": "Add Columns : \nScenario\nMonthYear"
				},
				{
					"name": "convertToEuro"
				},
				{
					"name": "cleanColumns"
				},
				{
					"name": "addPeriodYYYYMM01"
				},
				{
					"name": "filterColumns"
				},
				{
					"name": "unpvtConversionRate"
				},
				{
					"name": "spliCurrency"
				},
				{
					"name": "addPeriodCode"
				},
				{
					"name": "fCAD"
				},
				{
					"name": "fUSD"
				},
				{
					"name": "fEUR"
				},
				{
					"name": "fBRL"
				},
				{
					"name": "EUR"
				},
				{
					"name": "CAD"
				},
				{
					"name": "USD"
				},
				{
					"name": "BRL"
				},
				{
					"name": "joinEUR"
				},
				{
					"name": "joinUSD"
				},
				{
					"name": "joinCAD"
				},
				{
					"name": "joinBRL"
				}
			],
			"scriptLines": [
				"parameters{",
				"     unpvtTableName as string",
				"}",
				"source(output(",
				"          Index as string,",
				"          Anaplant_Index as string,",
				"          PBI_Index as string,",
				"          K_Nature as string,",
				"          BU_Code as string,",
				"          BU_Name as string,",
				"          Currency_Code as string,",
				"          MBR_Scope as string,",
				"          MBR_Month as string,",
				"          CostCenter_Code as string,",
				"          Period as string,",
				"          Value as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [ods].[{$unpvtTableName}]\"),",
				"     format: 'query') ~> getMBRUnpvtData",
				"source(output(",
				"          CurrencyID as long,",
				"          InputCurrency as string,",
				"          OutputCurrency as string,",
				"          CurrencyPair as string,",
				"          MonthYear as timestamp,",
				"          MonthYearID as integer,",
				"          Actual_LY as double,",
				"          Budget_CY as double,",
				"          Actual_CY as double,",
				"          Forecast_CY as double,",
				"          Forecast_NY as double",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDimConversionRate",
				"getMBRUnpvtData derive(Scenario = case( \r",
				"    like(Period, 'Actual%'),\r",
				"    'Actual',\r",
				"    case( like(Period, 'Budget%'),'Budget','Forecast')\r",
				"    ),",
				"          MonthYear = case(\r",
				"like(Period,'%CY%'),\r",
				"toDate(concat(toString(year(toDate(MBR_Month))), '-',right(Period,2))),\r",
				"case(\r",
				"like(Period,'%LY%'),\r",
				"toDate(concat(toString(year(toDate(MBR_Month))-1), '-',right(Period,2))),\r",
				"toDate(concat(toString(year(toDate(MBR_Month))+1), '-',right(Period,2)))\r",
				")\r",
				"),",
				"          Index = toInteger(Index),",
				"          Value = toFloat(Value)) ~> addColumns",
				"joinBRL derive(ValueEuro = Value * EURValue,",
				"          ValueUSD = Value * USDValue,",
				"          ValueCAD = Value * CADValue,",
				"          ValueBRL = Value * BRLValue) ~> convertToEuro",
				"convertToEuro select(mapColumn(",
				"          BusinessUnit = BU_Name,",
				"          Scenario,",
				"          NatureID = Index,",
				"          Nature = K_Nature,",
				"          CurrencyCode = Currency_Code,",
				"          CostCenterCode = CostCenter_Code,",
				"          MonthYear,",
				"          MonthYearID = PeriodYYYYMM01,",
				"          MBR_Month,",
				"          Value,",
				"          ValueEuro,",
				"          ValueUSD,",
				"          ValueCAD,",
				"          ValueBRL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanColumns",
				"addColumns derive(PeriodYYYYMM01 = toInteger(concat(toString(year(MonthYear)),right(concat('0',toString(month(MonthYear))),2), '01'))) ~> addPeriodYYYYMM01",
				"getDimConversionRate select(mapColumn(",
				"          InputCurrency,",
				"          OutputCurrency,",
				"          MonthYearID,",
				"          MonthYear,",
				"          Actual_LY,",
				"          Budget_CY,",
				"          Actual_CY,",
				"          Forecast_CY,",
				"          Forecast_NY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> filterColumns",
				"filterColumns unpivot(output(",
				"          Period as string,",
				"          Value as double",
				"     ),",
				"     ungroupBy(InputCurrency,",
				"          OutputCurrency,",
				"          MonthYearID,",
				"          MonthYear),",
				"     lateral: false,",
				"     ignoreNullPivots: false) ~> unpvtConversionRate",
				"addPeriodCode split(OutputCurrency =='EUR',",
				"     OutputCurrency == 'USD',",
				"     OutputCurrency =='CAD',",
				"     disjoint: true) ~> spliCurrency@(sEUR, sUSD, sCAD, sBRL)",
				"unpvtConversionRate derive(Period = concat(Period,'_', right(concat('0',toString(month(MonthYear))),2))) ~> addPeriodCode",
				"spliCurrency@sCAD filter(equals(OutputCurrency, \"CAD\")) ~> fCAD",
				"spliCurrency@sUSD filter(equals(OutputCurrency, 'USD')) ~> fUSD",
				"spliCurrency@sEUR filter(equals(OutputCurrency, 'EUR')) ~> fEUR",
				"spliCurrency@sBRL filter(equals(OutputCurrency, 'BRL')) ~> fBRL",
				"fEUR select(mapColumn(",
				"          EURInputCurrency = InputCurrency,",
				"          EUROutputCurrency = OutputCurrency,",
				"          EURMonthYearID = MonthYearID,",
				"          EURMonthYear = MonthYear,",
				"          EURPeriod = Period,",
				"          EURValue = Value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> EUR",
				"fCAD select(mapColumn(",
				"          CADInputCurrency = InputCurrency,",
				"          CADOutputCurrency = OutputCurrency,",
				"          CADMonthYearID = MonthYearID,",
				"          CADMonthYear = MonthYear,",
				"          CADPeriod = Period,",
				"          CADValue = Value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CAD",
				"fUSD select(mapColumn(",
				"          USDInputCurrency = InputCurrency,",
				"          USDOutputCurrency = OutputCurrency,",
				"          USDMonthYearID = MonthYearID,",
				"          USDMonthYear = MonthYear,",
				"          USDPeriod = Period,",
				"          USDValue = Value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> USD",
				"fBRL select(mapColumn(",
				"          BRLInputCurrency = InputCurrency,",
				"          BRLOutputCurrency = OutputCurrency,",
				"          BRLMonthYearID = MonthYearID,",
				"          BRLMonthYear = MonthYear,",
				"          BRLPeriod = Period,",
				"          BRLValue = Value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BRL",
				"addPeriodYYYYMM01, EUR join(Currency_Code == EURInputCurrency",
				"     && Period == EURPeriod",
				"     && PeriodYYYYMM01 == EURMonthYearID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEUR",
				"joinEUR, USD join(Currency_Code == USDInputCurrency",
				"     && Period == USDPeriod",
				"     && PeriodYYYYMM01 == USDMonthYearID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinUSD",
				"joinUSD, CAD join(Currency_Code == CADInputCurrency",
				"     && Period == CADPeriod",
				"     && PeriodYYYYMM01 == CADMonthYearID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCAD",
				"joinCAD, BRL join(Currency_Code == BRLInputCurrency",
				"     && Period == BRLPeriod",
				"     && PeriodYYYYMM01 == BRLMonthYearID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBRL",
				"cleanColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BusinessUnit as string,",
				"          Scenario as string,",
				"          NatureID as integer,",
				"          Nature as string,",
				"          MonthYear as timestamp,",
				"          Value as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertMBRStagingData"
			]
		}
	}
}