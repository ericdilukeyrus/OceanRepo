{
	"name": "df_stg_financials",
	"properties": {
		"folder": {
			"name": "02STG"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ocean_ods",
						"type": "DatasetReference"
					},
					"name": "getMBRUnpvtData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stg_financials",
						"type": "DatasetReference"
					},
					"name": "insertMBRStagingData"
				}
			],
			"transformations": [
				{
					"name": "addColumns",
					"description": "Add Columns : \nScenario\nMonthYear"
				},
				{
					"name": "toInsert"
				}
			],
			"scriptLines": [
				"parameters{",
				"     unpvtTableName as string",
				"}",
				"source(output(",
				"          Index as string,",
				"          Anaplant_Index as string,",
				"          PBI_Index as string,",
				"          K_Nature as string,",
				"          BU_Code as string,",
				"          BU_Name as string,",
				"          Currency_Code as string,",
				"          MBR_Scope as string,",
				"          MBR_Month as string,",
				"          CostCenter_Code as string,",
				"          Period as string,",
				"          Value as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [ods].[{$unpvtTableName}]\"),",
				"     format: 'query') ~> getMBRUnpvtData",
				"getMBRUnpvtData derive(Scenario = case( \r",
				"    like(Period, 'Actual%'),\r",
				"    'Actual',\r",
				"    case( like(Period, 'Budget%'),'Budget','Forecast')\r",
				"    ),",
				"          MonthYear = case(like(Period,'%CY%'),\r",
				"toDate(concat(toString(year(toDate(MBR_Month))), '-',right(Period,2))),\r",
				"toDate(concat(toString(year(toDate(MBR_Month))-1), '-',right(Period,2)))),",
				"          Index = toInteger(Index),",
				"          Value = toFloat(Value)) ~> addColumns",
				"addColumns select(mapColumn(",
				"          BusinessUnit = BU_Name,",
				"          Scenario,",
				"          NatureID = Index,",
				"          Nature = K_Nature,",
				"          CurrencyCode = Currency_Code,",
				"          CostCenterCode = CostCenter_Code,",
				"          MonthYear,",
				"          MBR_Month,",
				"          Value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> toInsert",
				"toInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BusinessUnit as string,",
				"          Scenario as string,",
				"          NatureID as integer,",
				"          Nature as string,",
				"          MonthYear as timestamp,",
				"          Value as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertMBRStagingData"
			]
		}
	}
}