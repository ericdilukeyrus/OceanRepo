{
	"name": "df_stg_financials",
	"properties": {
		"folder": {
			"name": "02STG"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ocean_ods",
						"type": "DatasetReference"
					},
					"name": "getMBRUnpvtData"
				},
				{
					"dataset": {
						"referenceName": "ds_ocean_dwh",
						"type": "DatasetReference"
					},
					"name": "getDImCurrency"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stg_financials",
						"type": "DatasetReference"
					},
					"name": "insertMBRStagingData"
				}
			],
			"transformations": [
				{
					"name": "addColumns",
					"description": "Add Columns : \nScenario\nMonthYear"
				},
				{
					"name": "upvtCurrency"
				},
				{
					"name": "calcPeriod"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     unpvtTableName as string",
				"}",
				"source(output(",
				"          Index as string,",
				"          Anaplant_Index as string,",
				"          PBI_Index as string,",
				"          K_Nature as string,",
				"          BU_Code as string,",
				"          BU_Name as string,",
				"          Currency_Code as string,",
				"          MBR_Scope as string,",
				"          MBR_Month as string,",
				"          CostCenter_Code as string,",
				"          Period as string,",
				"          Value as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [ods].[{$unpvtTableName}]\"),",
				"     format: 'query') ~> getMBRUnpvtData",
				"source(output(",
				"          CurrencyID as long,",
				"          InputCurrency as string,",
				"          CurrencyPair as string,",
				"          MonthYear as timestamp,",
				"          Actual_LY as double,",
				"          Budget_CY as double,",
				"          Actual_CY as double",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getDImCurrency",
				"getMBRUnpvtData derive(Scenario = case( \r",
				"    like(Period, 'Actual%'),\r",
				"    'Actual',\r",
				"    case( like(Period, 'Budget%'),'Budget','Forecast')\r",
				"    ),",
				"          MonthYear = case(\r",
				"like(Period,'%CY%'),\r",
				"toDate(concat(toString(year(toDate(MBR_Month))), '-',right(Period,2))),\r",
				"case(\r",
				"like(Period,'%LY%'),\r",
				"toDate(concat(toString(year(toDate(MBR_Month))-1), '-',right(Period,2))),\r",
				"toDate(concat(toString(year(toDate(MBR_Month))+1), '-',right(Period,2)))\r",
				")\r",
				"),",
				"          Index = toInteger(Index),",
				"          Value = toFloat(Value),",
				"          PeriodCurr = replace(replace(Period,' Forecast_CY',' Budget_CY'),' Forecast_NY','Budget_CY')) ~> addColumns",
				"getDImCurrency unpivot(output(",
				"          Period as string,",
				"          Value as double",
				"     ),",
				"     ungroupBy(CurrencyID,",
				"          InputCurrency,",
				"          CurrencyPair,",
				"          MonthYear),",
				"     lateral: false,",
				"     ignoreNullPivots: false) ~> upvtCurrency",
				"upvtCurrency derive(Period = concat(Period,'_',toString(MonthYear, 'MM'))) ~> calcPeriod",
				"addColumns, calcPeriod join(Currency_Code == InputCurrency",
				"     && PeriodCurr == calcPeriod@Period,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(ValueEuro = addColumns@Value* upvtCurrency@Value) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          BusinessUnit = BU_Name,",
				"          Scenario,",
				"          NatureID = Index,",
				"          Nature = K_Nature,",
				"          CurrencyCode = Currency_Code,",
				"          CostCenterCode = CostCenter_Code,",
				"          MonthYear = addColumns@MonthYear,",
				"          MBR_Month,",
				"          Value = addColumns@Value,",
				"          ValueEuro",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BusinessUnit as string,",
				"          Scenario as string,",
				"          NatureID as integer,",
				"          Nature as string,",
				"          MonthYear as timestamp,",
				"          Value as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertMBRStagingData"
			]
		}
	}
}