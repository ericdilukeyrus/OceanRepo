{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ocean-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_licence_maintenance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stg_mbr_licence_maintenance",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "BU",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Version",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Period",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Software partners",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "License - Perpetual",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "License - New subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "Maintenance - 1st year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "License - Renewed subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "Maintenance - Renewal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "License - Referrals",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "Total Revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "License purchases - Perpetual",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "License purchases - New subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "Maintenance purchases - 1st year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "License purchases - Renewed subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "Maintenance purchases - Renewal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "Total cost",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "Licenses - Perpetual - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "Licenses - New Subscription - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "Maintenance - 1st year - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "Licenses - Renewed subscription - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "Maintenance - Renewal - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "Licenses - Referrals - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "Total Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "Licenses - Perpetual - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 26
										},
										"sink": {
											"name": "Licenses - New Subscription - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "Maintenance - 1st year - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 28
										},
										"sink": {
											"name": "Licenses - Renewed subscription - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 29
										},
										"sink": {
											"name": "Maintenance - Renewal - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 30
										},
										"sink": {
											"name": "Licenses - Referrals - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 31
										},
										"sink": {
											"name": "Total Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mbr_licence_maintenance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "R_MBR_licence_maintenance"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T13:29:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_nature')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ods_mbr_nature",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mbr_nature",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "R_MBR_Nature"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T10:38:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_scope_dynamic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Range Cells",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Range",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Load to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE ods.[@{item().SheetName}]",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "mbr_dynamic_source",
											"type": "DatasetReference",
											"parameters": {
												"vRange": {
													"value": "@item().Range",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ocean_dwh",
											"type": "DatasetReference",
											"parameters": {
												"vTableName": {
													"value": "@item().SheetName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Range": {
						"type": "array",
						"defaultValue": [
							{
								"Range": "CP8:DA503"
							}
						]
					}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T13:29:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_00_start_process_snowflake_trigger_sched')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Trigger dbt schedule",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": "{\n  \"query\": \"mutation trigger($scheduleName: String!) {triggerBoltRun(scheduleName: $scheduleName){runId}}\",\n  \"variables\": { \"scheduleName\": \"operations_run\" }\n}",
								"additionalHeaders": {
									"content-type": "application/json",
									"X-API-KEY": "dq47d74m6kwkgg37r7gk2zyvghfyw6zu",
									"X-API-SECRET": "gv7ajlg4ga50vl2e95620g33fieh1ahlkpkdpj2iw75phuwntmi1ca26amji61qph4dqywtl4zwplqfdt26vjybu5qcq05an"
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T13:38:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_02_copy_files_to_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of Files by Scope",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_sharepoint_json",
								"type": "DatasetReference",
								"parameters": {
									"pMBR_Scope": {
										"value": "@pipeline().parameters.pMBR_Scope",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Each MBR File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Files by Scope",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Files by Scope').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Files to Toload folder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization:Bearer ',activity('Get token').output.access_token)}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_sharepoint_ocean_project_copy1",
											"type": "DatasetReference",
											"parameters": {
												"pServerRelativeUrl": {
													"value": "@item().GetFileUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_mbr_files_bin",
											"type": "DatasetReference",
											"parameters": {
												"pMBR_Scope": {
													"value": "@pipeline().parameters.pMBR_Scope",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@item().Name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://accounts.accesscontrol.windows.net/168e48b2-81f0-4aac-bc77-d58d07d205e2/tokens/OAuth/2",
							"connectVia": {
								"referenceName": "integrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": "grant_type=client_credentials&client_id=63bb52e3-0d92-4899-991c-bda347d9dd3b@168e48b2-81f0-4aac-bc77-d58d07d205e2&client_secret=S8v8Q~jvkg-AXO-gSxyxnJQTd9zhR1SiPr0ukcz5&resource=00000003-0000-0ff1-ce00-000000000000/keyrusgroup.sharepoint.com@168e48b2-81f0-4aac-bc77-d58d07d205e2"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pMBR_Scope": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00INIT"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_03_summary_log')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Log Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select [MBR_FileName] as MBRFileName, [MBR_Scope] as MBRScope,[MBR_Month] as MBRMonth\n  ,[MBR_Currency_Code] as MBRCurrCode ,[MBR_BU_Code] as MBRBUCode ,[MBR_BU_Name] as MBRBUName ,[MBR_SheetName] as MBRSheetName from  [@{pipeline().globalParameters.gODSSchemaName}].[@{pipeline().globalParameters.gSourcesConfigTableName}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MBRFileName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRScope",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_Scope",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRMonth",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_Month",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRCurrCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_Currency_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRBUCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_BU_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRBUName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_BU_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRSheetName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_SheetName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesConfigTableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "SummaryLoad"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "03DWH"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_04_archive_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All Files",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select distinct concat('toload/',MBR_Scope) as SourcePathFolder,\nconcat('archives/',MBR_Scope) as DestiPathFolder, MBR_FileName as FileName , concat(format( GETDATE(),'yyyyMMdd_HHmmss_'),MBR_FileName) as DestiFileName\nfrom  [@{pipeline().globalParameters.gODSSchemaName}].[@{pipeline().globalParameters.gSourcesConfigTableName}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesConfigTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach MBR Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get All Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Move File to Archives",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_mbr_excel_files",
											"type": "DatasetReference",
											"parameters": {
												"pFolder": {
													"value": "@item().SourcePathFolder",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_mbr_excel_files",
											"type": "DatasetReference",
											"parameters": {
												"pFolder": {
													"value": "@item().DestiPathFolder",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@item().DestiFileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "03DWH"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Sheets",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.SheetName",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Load Dimensions to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE ods.[@{item().SheetName}]",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "mbr_dimensions",
											"type": "DatasetReference",
											"parameters": {
												"vSheetName": {
													"value": "@item().SheetName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ocean_ods",
											"type": "DatasetReference",
											"parameters": {
												"vTableName": "@item().SheetName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SheetName": {
						"type": "array",
						"defaultValue": [
							{
								"SheetName": "D_Organization"
							},
							{
								"SheetName": "D_MBR_scope"
							},
							{
								"SheetName": "D_Currency"
							},
							{
								"SheetName": "D_Version"
							},
							{
								"SheetName": "D_EmployeeType"
							},
							{
								"SheetName": "D_LevelOfSeniority"
							},
							{
								"SheetName": "D_SoftwarePartner"
							},
							{
								"SheetName": "D_CostCenter"
							},
							{
								"SheetName": "D_ServiceProductionCategory"
							},
							{
								"SheetName": "D_Nature"
							}
						]
					}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T10:38:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Load_Fact_Financials')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference"
							},
							"name": "getMBRStagingData"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimScenario"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimNature"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimOrganisation"
						},
						{
							"dataset": {
								"referenceName": "ds_fact_financials",
								"type": "DatasetReference"
							},
							"name": "getFactFinancials"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getFactDrivers"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimKPI"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimCostCenter"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_fact_financials",
								"type": "DatasetReference"
							},
							"name": "insertFactFinancials"
						},
						{
							"dataset": {
								"referenceName": "ds_fact_drivers",
								"type": "DatasetReference"
							},
							"name": "insertFactDrivers"
						}
					],
					"transformations": [
						{
							"name": "addColumns",
							"description": "Add MonthYearID"
						},
						{
							"name": "joinDimScenario",
							"description": "Inner join with 'getDimScenario'"
						},
						{
							"name": "getOrganizationID"
						},
						{
							"name": "joinDimOrganisation",
							"description": "Inner join on 'joinDimNature' and 'getOrganizationID'"
						},
						{
							"name": "cleanColumns"
						},
						{
							"name": "joinFactFinancials"
						},
						{
							"name": "factFinancialsClean"
						},
						{
							"name": "insertOrUpdateColumns"
						},
						{
							"name": "insertOrUpdate"
						},
						{
							"name": "includesUpsert"
						},
						{
							"name": "cleanColumnsToUpsert"
						},
						{
							"name": "convertToInteger"
						},
						{
							"name": "FINorKPI"
						},
						{
							"name": "joinDimNature"
						},
						{
							"name": "factDriversClean"
						},
						{
							"name": "joinFactKPI"
						},
						{
							"name": "upsertColumn"
						},
						{
							"name": "includesUpsertKPI"
						},
						{
							"name": "cleanColumnsToUpsertKPI"
						},
						{
							"name": "insertOrUpdateKPI"
						},
						{
							"name": "joinDimKPI"
						},
						{
							"name": "joinDimCostCenter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pPipelineRunID as string",
						"}",
						"source(output(",
						"          BusinessUnit as string,",
						"          Scenario as string,",
						"          NatureID as integer,",
						"          Nature as string,",
						"          CurrencyCode as string,",
						"          CostCenterCode as string,",
						"          MonthYear as timestamp,",
						"          MonthYearID as integer,",
						"          MBR_Month as string,",
						"          Value as double,",
						"          ValueEuro as double,",
						"          ValueUSD as double,",
						"          ValueCAD as double,",
						"          ValueBRL as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getMBRStagingData",
						"source(output(",
						"          Scenario_Name0 as string,",
						"          Scenario_Code0 as string,",
						"          Comment as string,",
						"          Scenario_Index as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimScenario",
						"source(output(",
						"          NatureGroupID as long,",
						"          NatureGroup as string,",
						"          NatureSubGroupID as long,",
						"          NatureSubGroup as string,",
						"          Nature as string,",
						"          NatureID as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimNature",
						"source(output(",
						"          {Business Unit} as string,",
						"          {MBR Scope} as string,",
						"          Area as string,",
						"          Zone as string,",
						"          {Keyrus Group} as string,",
						"          Total as string,",
						"          {MBR Scope_1} as string,",
						"          Management_hierarchy_1 as string,",
						"          Management_hierarchy_2 as string,",
						"          Management_hierarchy_3 as string,",
						"          Management_hierarchy_4 as string,",
						"          Currency_Name0 as string,",
						"          Currency_Code0 as string,",
						"          BusinessLine_Name as string,",
						"          Country_Name as string,",
						"          {Financial manager} as string,",
						"          {Managing Director} as string,",
						"          {MBR file user(s)} as string,",
						"          OrganisationID as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimOrganisation",
						"source(output(",
						"          FactFinID as long,",
						"          ScenarioID as integer,",
						"          NatureID as integer,",
						"          OrganisationID as integer,",
						"          CostCenterID as integer,",
						"          MBRMonth as string,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          CurrencyCode as string,",
						"          Value as double,",
						"          ValueEUR as double,",
						"          ValueUSD as double,",
						"          ValueCAD as double,",
						"          ValueBRL as double,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getFactFinancials",
						"source(output(",
						"          FactDriversID as long,",
						"          ScenarioID as integer,",
						"          OrganisationID as integer,",
						"          KPIID as integer,",
						"          CostCenterID as integer,",
						"          MBRMonth as string,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          CurrencyCode as string,",
						"          Value as double,",
						"          ValueEUR as double,",
						"          ValueUSD as double,",
						"          ValueCAD as double,",
						"          ValueBRL as double,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getFactDrivers",
						"source(output(",
						"          Index as long,",
						"          PeopleType as string,",
						"          PeopleTypeID as long,",
						"          KPI as string,",
						"          IsKPI as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimKPI",
						"source(output(",
						"          CostCenterID as integer,",
						"          Cost_center_Name0 as string,",
						"          Cost_Center_Code0 as string,",
						"          Cost_center_Name1 as string,",
						"          Cost_Center_Code1 as string,",
						"          Cost_center_Name2 as string,",
						"          Cost_Center_Code2 as string,",
						"          Cost_center_Name3 as string,",
						"          Cost_Center_Code3 as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimCostCenter",
						"getMBRStagingData derive(CreatedBy = $pPipelineRunID) ~> addColumns",
						"addColumns, getDimScenario join(lower(trim(Scenario)) == lower(trim(Scenario_Name0)),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimScenario",
						"getDimOrganisation select(mapColumn(",
						"          {Business Unit},",
						"          OrganisationID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> getOrganizationID",
						"joinDimScenario, getOrganizationID join(lower(trim(BusinessUnit)) == lower(trim({Business Unit})),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimOrganisation",
						"joinDimCostCenter select(mapColumn(",
						"          ScenarioID = Scenario_Index,",
						"          OrganisationID,",
						"          NatureID,",
						"          CostCenterID,",
						"          MBRMonth = MBR_Month,",
						"          MonthYearID,",
						"          MonthYear,",
						"          CurrencyCode,",
						"          Value,",
						"          ValueEuro,",
						"          ValueUSD,",
						"          ValueCAD,",
						"          ValueBRL,",
						"          CreatedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanColumns",
						"joinDimNature, factFinancialsClean join(FINorKPI@FIN@ScenarioID == factFinancialsClean@ScenarioID",
						"     && getDimNature@NatureID == factFinancialsClean@NatureID",
						"     && FINorKPI@FIN@OrganisationID == factFinancialsClean@OrganisationID",
						"     && FINorKPI@FIN@MonthYearID == factFinancialsClean@MonthYearID",
						"     && FINorKPI@FIN@CostCenterID == factFinancialsClean@CostCenterID",
						"     && FINorKPI@FIN@MBRMonth == factFinancialsClean@MBRMonth",
						"     && FINorKPI@FIN@CurrencyCode == factFinancialsClean@CurrencyCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactFinancials",
						"getFactFinancials select(mapColumn(",
						"          ScenarioID,",
						"          NatureID,",
						"          OrganisationID,",
						"          CostCenterID,",
						"          MBRMonth,",
						"          MonthYearID,",
						"          CurrencyCode,",
						"          Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> factFinancialsClean",
						"joinFactFinancials derive(InsertOrUpdate = iif(\r",
						"    isNull(factFinancialsClean@ScenarioID) && \r",
						"    isNull(factFinancialsClean@NatureID) && \r",
						"    isNull(factFinancialsClean@OrganisationID) && \r",
						"    isNull(factFinancialsClean@CostCenterID) && \r",
						"    isNull(factFinancialsClean@MonthYearID) &&\r",
						"    isNull(factFinancialsClean@CurrencyCode) &&\r",
						"    isNull(factFinancialsClean@MBRMonth)\r",
						", 'I',\r",
						"iif(FINorKPI@FIN@Value == factFinancialsClean@Value, 'P','U')\r",
						")) ~> insertOrUpdateColumns",
						"cleanColumnsToUpsert alterRow(insertIf(InsertOrUpdate=='I'),",
						"     updateIf(InsertOrUpdate=='U')) ~> insertOrUpdate",
						"insertOrUpdateColumns filter(in(['I','U'],InsertOrUpdate)) ~> includesUpsert",
						"includesUpsert select(mapColumn(",
						"          ScenarioID = FINorKPI@FIN@ScenarioID,",
						"          OrganisationID = FINorKPI@FIN@OrganisationID,",
						"          NatureID = FINorKPI@FIN@NatureID,",
						"          CostCenterID = FINorKPI@FIN@CostCenterID,",
						"          MBRMonth = FINorKPI@FIN@MBRMonth,",
						"          MonthYearID = FINorKPI@FIN@MonthYearID,",
						"          MonthYear,",
						"          CurrencyCode = FINorKPI@FIN@CurrencyCode,",
						"          Value = FINorKPI@FIN@Value,",
						"          ValueEuro,",
						"          ValueUSD,",
						"          ValueCAD,",
						"          ValueBRL,",
						"          CreatedBy,",
						"          InsertOrUpdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanColumnsToUpsert",
						"cleanColumns derive(ScenarioID = toInteger(ScenarioID),",
						"          OrganisationID = toInteger(OrganisationID),",
						"          CostCenterID = iifNull(CostCenterID, -1, CostCenterID),",
						"          FactIndicator = iif(NatureID >= 372, 'KPI', 'FIN')) ~> convertToInteger",
						"convertToInteger split(FactIndicator == 'FIN',",
						"     disjoint: false) ~> FINorKPI@(FIN, KPI)",
						"FINorKPI@FIN, getDimNature join(FINorKPI@FIN@NatureID == getDimNature@NatureID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimNature",
						"getFactDrivers select(mapColumn(",
						"          ScenarioID,",
						"          KPIID,",
						"          OrganisationID,",
						"          CostCenterID,",
						"          MonthYearID,",
						"          CurrencyCode,",
						"          Value,",
						"          MBRMonth",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> factDriversClean",
						"joinDimKPI, factDriversClean join(FINorKPI@KPI@ScenarioID == factDriversClean@ScenarioID",
						"     && FINorKPI@KPI@OrganisationID == factDriversClean@OrganisationID",
						"     && Index == KPIID",
						"     && FINorKPI@KPI@MonthYearID == factDriversClean@MonthYearID",
						"     && FINorKPI@KPI@CostCenterID == factDriversClean@CostCenterID",
						"     && FINorKPI@KPI@MBRMonth == factDriversClean@MBRMonth",
						"     && FINorKPI@KPI@CurrencyCode == factDriversClean@CurrencyCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactKPI",
						"joinFactKPI derive(InsertOrUpdate = iif(\r",
						"    isNull(factDriversClean@ScenarioID) && \r",
						"    isNull(KPIID) && \r",
						"    isNull(factDriversClean@OrganisationID) && \r",
						"    isNull(factDriversClean@MonthYearID) &&\r",
						"    isNull(factDriversClean@CostCenterID) &&\r",
						"    isNull(factDriversClean@CurrencyCode)&&\r",
						"    isNull(factDriversClean@MBRMonth)\r",
						"    , \r",
						"'I',iif(FINorKPI@KPI@Value == factDriversClean@Value, 'P','U'))) ~> upsertColumn",
						"upsertColumn filter(in(['I','U'],InsertOrUpdate)) ~> includesUpsertKPI",
						"includesUpsertKPI select(mapColumn(",
						"          ScenarioID = FINorKPI@KPI@ScenarioID,",
						"          OrganisationID = FINorKPI@KPI@OrganisationID,",
						"          KPIID = NatureID,",
						"          CostCenterID = FINorKPI@KPI@CostCenterID,",
						"          MBRMonth = FINorKPI@KPI@MBRMonth,",
						"          MonthYearID = FINorKPI@KPI@MonthYearID,",
						"          MonthYear,",
						"          CurrencyCode = FINorKPI@KPI@CurrencyCode,",
						"          Value = FINorKPI@KPI@Value,",
						"          ValueEUR = ValueEuro,",
						"          ValueUSD,",
						"          ValueCAD,",
						"          ValueBRL,",
						"          CreatedBy,",
						"          InsertOrUpdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanColumnsToUpsertKPI",
						"cleanColumnsToUpsertKPI alterRow(insertIf(InsertOrUpdate=='I'),",
						"     updateIf(InsertOrUpdate=='U')) ~> insertOrUpdateKPI",
						"FINorKPI@KPI, getDimKPI join(NatureID == Index,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimKPI",
						"joinDimOrganisation, getDimCostCenter join(lower(trim(CostCenterCode)) == lower(trim(Cost_Center_Code0)),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimCostCenter",
						"insertOrUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FactFinID as long,",
						"          ScenarioID as integer,",
						"          NatureID as integer,",
						"          OrganisationID as integer,",
						"          CostCenterID as integer,",
						"          MBRMonth as string,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          CurrencyCode as string,",
						"          Value as double,",
						"          ValueEUR as double,",
						"          ValueUSD as double,",
						"          ValueCAD as double,",
						"          ValueBRL as double,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ScenarioID','NatureID','OrganisationID','CostCenterID','MonthYearID','CurrencyCode','MBRMonth'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ScenarioID,",
						"          NatureID,",
						"          OrganisationID,",
						"          CostCenterID,",
						"          MBRMonth,",
						"          MonthYearID,",
						"          MonthYear,",
						"          CurrencyCode,",
						"          Value,",
						"          ValueEUR = ValueEuro,",
						"          ValueUSD,",
						"          ValueCAD,",
						"          ValueBRL,",
						"          CreatedBy",
						"     )) ~> insertFactFinancials",
						"insertOrUpdateKPI sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FactDriversID as long,",
						"          ScenarioID as integer,",
						"          OrganisationID as integer,",
						"          KPIID as integer,",
						"          CostCenterID as integer,",
						"          MBRMonth as string,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          CurrencyCode as string,",
						"          Value as double,",
						"          ValueEUR as double,",
						"          ValueUSD as double,",
						"          ValueCAD as double,",
						"          ValueBRL as double,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ScenarioID','OrganisationID','KPIID','MonthYearID','CostCenterID','MBRMonth','CurrencyCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ScenarioID,",
						"          OrganisationID,",
						"          KPIID,",
						"          CostCenterID,",
						"          MBRMonth,",
						"          MonthYearID,",
						"          MonthYear,",
						"          CurrencyCode,",
						"          Value,",
						"          ValueEUR,",
						"          ValueUSD,",
						"          ValueCAD,",
						"          ValueBRL,",
						"          CreatedBy",
						"     )) ~> insertFactDrivers"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Load_Fact_KPI_Pyramid')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference"
							},
							"name": "getMBRKPIPyramidStaging"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimScenario"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimOrganisation"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getFactKpi"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimPeopleType"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimSeniorityLevel"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimCostCenter"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "insertFactKPIPyramid"
						}
					],
					"transformations": [
						{
							"name": "addYearMonthID"
						},
						{
							"name": "joinDimScenario"
						},
						{
							"name": "joinDimOrganisation"
						},
						{
							"name": "cleanColumns"
						},
						{
							"name": "joinFactKPI"
						},
						{
							"name": "insertOrUpdate"
						},
						{
							"name": "includeUpsert"
						},
						{
							"name": "insertUpdate"
						},
						{
							"name": "joinDimCostCenter"
						},
						{
							"name": "joinDimPeopleType"
						},
						{
							"name": "joinDimSeniorityLevel"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pMBR_Month as string",
						"}",
						"source(output(",
						"          BU as string,",
						"          Version as string,",
						"          Period as date,",
						"          CostCenter as string,",
						"          PeopleType as string,",
						"          LevelSeniority as string,",
						"          EndOfMonth_FTE as float,",
						"          SrvcSales_bef_bonimali as float,",
						"          BillableDays as float,",
						"          DailyRate as float,",
						"          AnnualDirectCosts as float,",
						"          AnnualProductionDays as float,",
						"          DailyCost as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getMBRKPIPyramidStaging",
						"source(output(",
						"          Scenario_Name0 as string,",
						"          Scenario_Code0 as string,",
						"          Comment as string,",
						"          Scenario_Index as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimScenario",
						"source(output(",
						"          {Business Unit} as string,",
						"          {MBR Scope} as string,",
						"          Area as string,",
						"          Zone as string,",
						"          {Keyrus Group} as string,",
						"          Total as string,",
						"          {MBR Scope_1} as string,",
						"          Management_hierarchy_1 as string,",
						"          Management_hierarchy_2 as string,",
						"          Management_hierarchy_3 as string,",
						"          Management_hierarchy_4 as string,",
						"          Currency_Name0 as string,",
						"          Currency_Code0 as string,",
						"          BusinessLine_Name as string,",
						"          Country_Name as string,",
						"          {Financial manager} as string,",
						"          {Managing Director} as string,",
						"          {MBR file user(s)} as string,",
						"          OrganisationID as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimOrganisation",
						"source(output(",
						"          FactKpiID as long,",
						"          OrganisationID as long,",
						"          ScenarioID as long,",
						"          CostCenterID as long,",
						"          PeopleTypeID as long,",
						"          SeniorityLevelID as long,",
						"          MBR_Month as string,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          EndOfMonth_FTE as float,",
						"          SrvcSales_bef_bonimali as float,",
						"          BillableDays as float,",
						"          DailyRate as float,",
						"          AnnualDirectCosts as float,",
						"          AnnualProductionDays as float,",
						"          DailyCost as float,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getFactKpi",
						"source(output(",
						"          PeopleTypeID as long,",
						"          PeopleType as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimPeopleType",
						"source(output(",
						"          SeniorityLevelID as long,",
						"          SeniorityLevelCode as string,",
						"          SeniorityLevelIndex as integer,",
						"          SeniorityLevelName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimSeniorityLevel",
						"source(output(",
						"          CostCenterID as integer,",
						"          Cost_center_Name0 as string,",
						"          Cost_Center_Code0 as string,",
						"          Cost_center_Name1 as string,",
						"          Cost_Center_Code1 as string,",
						"          Cost_center_Name2 as string,",
						"          Cost_Center_Code2 as string,",
						"          Cost_center_Name3 as string,",
						"          Cost_Center_Code3 as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimCostCenter",
						"getMBRKPIPyramidStaging derive(MonthYearID = toInteger(concat(toString(year(Period)), lpad(toString(month(Period)),2,'0'), '01')),",
						"          MBR_Month = $pMBR_Month) ~> addYearMonthID",
						"addYearMonthID, getDimScenario join(lower(trim(Version)) == lower(trim(Scenario_Name0)),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimScenario",
						"joinDimScenario, getDimOrganisation join(lower(trim(BU)) == lower(trim({Business Unit})),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimOrganisation",
						"joinDimSeniorityLevel select(mapColumn(",
						"          OrganisationID,",
						"          ScenarioID = Scenario_Index,",
						"          CostCenterID,",
						"          PeopleTypeID,",
						"          SeniorityLevelID,",
						"          MBR_Month,",
						"          MonthYearID,",
						"          MonthYear = Period,",
						"          EndOfMonth_FTE,",
						"          SrvcSales_bef_bonimali,",
						"          BillableDays,",
						"          DailyRate,",
						"          AnnualDirectCosts,",
						"          AnnualProductionDays,",
						"          DailyCost",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanColumns",
						"cleanColumns, getFactKpi join(cleanColumns@OrganisationID == getFactKpi@OrganisationID",
						"     && cleanColumns@ScenarioID == getFactKpi@ScenarioID",
						"     && cleanColumns@MonthYearID == getFactKpi@MonthYearID",
						"     && cleanColumns@CostCenterID == getFactKpi@CostCenterID",
						"     && cleanColumns@PeopleTypeID == getFactKpi@PeopleTypeID",
						"     && cleanColumns@SeniorityLevelID == getFactKpi@SeniorityLevelID",
						"     && cleanColumns@MBR_Month == getFactKpi@MBR_Month,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactKPI",
						"joinFactKPI derive(InsertOrUpdate = iif(\r",
						"  isNull(getFactKpi@OrganisationID) && \r",
						"  isNull(getFactKpi@ScenarioID) && \r",
						"  isNull(getFactKpi@MonthYearID) && \r",
						"  isNull(getFactKpi@CostCenterID) && \r",
						"  isNull(getFactKpi@PeopleTypeID) && \r",
						"  isNull(getFactKpi@SeniorityLevelID) &&\r",
						"  isNull(getFactKpi@MBR_Month)\r",
						", 'I',\r",
						"iif(\r",
						"    equals(cleanColumns@EndOfMonth_FTE,getFactKpi@EndOfMonth_FTE) && \r",
						"    equals(cleanColumns@SrvcSales_bef_bonimali,getFactKpi@SrvcSales_bef_bonimali) && \r",
						"    equals(cleanColumns@BillableDays,getFactKpi@BillableDays) && \r",
						"    equals(cleanColumns@DailyRate,getFactKpi@DailyRate) &&\r",
						"    equals(cleanColumns@AnnualDirectCosts,getFactKpi@AnnualDirectCosts) &&  \r",
						"    equals(cleanColumns@AnnualProductionDays,getFactKpi@AnnualProductionDays) &&\r",
						"    equals(cleanColumns@DailyCost,getFactKpi@DailyCost) , 'P','U')\r",
						")) ~> insertOrUpdate",
						"insertOrUpdate filter(in(['I','U'],InsertOrUpdate)) ~> includeUpsert",
						"includeUpsert alterRow(insertIf(InsertOrUpdate=='I'),",
						"     updateIf(InsertOrUpdate=='U')) ~> insertUpdate",
						"joinDimOrganisation, getDimCostCenter join(lower(trim(CostCenter)) == lower(trim(Cost_center_Name0)),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimCostCenter",
						"joinDimCostCenter, getDimPeopleType join(lower(trim(getMBRKPIPyramidStaging@PeopleType)) == lower(trim(getDimPeopleType@PeopleType)),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimPeopleType",
						"joinDimPeopleType, getDimSeniorityLevel join(lower(trim(LevelSeniority)) == lower(trim(SeniorityLevelCode)),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimSeniorityLevel",
						"insertUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['OrganisationID','ScenarioID','CostCenterID','PeopleTypeID','SeniorityLevelID','MBR_Month','MonthYearID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OrganisationID = cleanColumns@OrganisationID,",
						"          ScenarioID = cleanColumns@ScenarioID,",
						"          CostCenterID = cleanColumns@CostCenterID,",
						"          PeopleTypeID = cleanColumns@PeopleTypeID,",
						"          SeniorityLevelID = cleanColumns@SeniorityLevelID,",
						"          MBR_Month = cleanColumns@MBR_Month,",
						"          MonthYearID = cleanColumns@MonthYearID,",
						"          MonthYear = cleanColumns@MonthYear,",
						"          EndOfMonth_FTE = cleanColumns@EndOfMonth_FTE,",
						"          SrvcSales_bef_bonimali = cleanColumns@SrvcSales_bef_bonimali,",
						"          BillableDays = cleanColumns@BillableDays,",
						"          DailyRate = cleanColumns@DailyRate,",
						"          AnnualDirectCosts = cleanColumns@AnnualDirectCosts,",
						"          AnnualProductionDays = cleanColumns@AnnualProductionDays,",
						"          DailyCost = cleanColumns@DailyCost",
						"     )) ~> insertFactKPIPyramid"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_all_mbr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01ODS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_mbr_pnl_data",
								"type": "DatasetReference"
							},
							"name": "getMBRData",
							"description": "Retrieve Actual CY,LY & Budget"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ocean_stg_nonecrypted",
								"type": "DatasetReference"
							},
							"name": "insertRawMBRData"
						}
					],
					"transformations": [
						{
							"name": "addMBRMetadata",
							"description": "BU_Code\nBU_Name\nMBR_Scope\nMBR_Month"
						},
						{
							"name": "removeEmptyColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pBU_Code as string,",
						"     pRawTableName as string,",
						"     pMBR_Scope as string,",
						"     pMBR_Month as string,",
						"     pBU_Name as string,",
						"     pCurrency_Code as string,",
						"     pFileName as string",
						"}",
						"source(output(",
						"          {_col0_} as short,",
						"          {_col1_} as string,",
						"          {_col2_} as string,",
						"          {_col3_} as string,",
						"          {_col4_} as string,",
						"          {_col5_} as double,",
						"          {_col6_} as double,",
						"          {_col7_} as double,",
						"          {_col8_} as double,",
						"          {_col9_} as double,",
						"          {_col10_} as double,",
						"          {_col11_} as double,",
						"          {_col12_} as double,",
						"          {_col13_} as double,",
						"          {_col14_} as double,",
						"          {_col15_} as double,",
						"          {_col16_} as double,",
						"          {_col17_} as double,",
						"          {_col18_} as string,",
						"          {_col19_} as double,",
						"          {_col20_} as double,",
						"          {_col21_} as double,",
						"          {_col22_} as double,",
						"          {_col23_} as double,",
						"          {_col24_} as double,",
						"          {_col25_} as double,",
						"          {_col26_} as double,",
						"          {_col27_} as double,",
						"          {_col28_} as double,",
						"          {_col29_} as double,",
						"          {_col30_} as double,",
						"          {_col31_} as double,",
						"          {_col32_} as string,",
						"          {_col33_} as double,",
						"          {_col34_} as double,",
						"          {_col35_} as double,",
						"          {_col36_} as double,",
						"          {_col37_} as double,",
						"          {_col38_} as double,",
						"          {_col39_} as double,",
						"          {_col40_} as double,",
						"          {_col41_} as double,",
						"          {_col42_} as double,",
						"          {_col43_} as double,",
						"          {_col44_} as double,",
						"          {_col45_} as double,",
						"          {_col46_} as double,",
						"          {_col47_} as double,",
						"          {_col48_} as double",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> getMBRData",
						"getMBRData derive(BU_Code = $pBU_Code,",
						"          BU_Name = $pBU_Name,",
						"          Currency_Code = $pCurrency_Code,",
						"          MBR_Scope = $pMBR_Scope,",
						"          MBR_Month = $pMBR_Month,",
						"          CostCenter_Code = left({_col1_},7)) ~> addMBRMetadata",
						"addMBRMetadata select(mapColumn(",
						"          {_col0_},",
						"          {_col1_},",
						"          {_col2_},",
						"          {_col4_},",
						"          {_col5_},",
						"          {_col6_},",
						"          {_col7_},",
						"          {_col8_},",
						"          {_col9_},",
						"          {_col10_},",
						"          {_col11_},",
						"          {_col12_},",
						"          {_col13_},",
						"          {_col14_},",
						"          {_col15_},",
						"          {_col16_},",
						"          {_col19_},",
						"          {_col20_},",
						"          {_col21_},",
						"          {_col22_},",
						"          {_col23_},",
						"          {_col24_},",
						"          {_col25_},",
						"          {_col26_},",
						"          {_col27_},",
						"          {_col28_},",
						"          {_col29_},",
						"          {_col30_},",
						"          {_col33_},",
						"          {_col34_},",
						"          {_col35_},",
						"          {_col36_},",
						"          {_col37_},",
						"          {_col38_},",
						"          {_col39_},",
						"          {_col40_},",
						"          {_col41_},",
						"          {_col42_},",
						"          {_col43_},",
						"          {_col44_},",
						"          {_col46_},",
						"          {_col47_},",
						"          {_col48_},",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month,",
						"          CostCenter_Code",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> removeEmptyColumns",
						"removeEmptyColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Index as string,",
						"          Anaplant_Index as string,",
						"          PBI_Index as string,",
						"          K_Nature as string,",
						"          Actual_LY_01 as string,",
						"          Actual_LY_02 as string,",
						"          Actual_LY_03 as string,",
						"          Actual_LY_04 as string,",
						"          Actual_LY_05 as string,",
						"          Actual_LY_06 as string,",
						"          Actual_LY_07 as string,",
						"          Actual_LY_08 as string,",
						"          Actual_LY_09 as string,",
						"          Actual_LY_10 as string,",
						"          Actual_LY_11 as string,",
						"          Actual_LY_12 as string,",
						"          Budget_CY_01 as string,",
						"          Budget_CY_02 as string,",
						"          Budget_CY_03 as string,",
						"          Budget_CY_04 as string,",
						"          Budget_CY_05 as string,",
						"          Budget_CY_06 as string,",
						"          Budget_CY_07 as string,",
						"          Budget_CY_08 as string,",
						"          Budget_CY_09 as string,",
						"          Budget_CY_10 as string,",
						"          Budget_CY_11 as string,",
						"          Budget_CY_12 as string,",
						"          Actual_CY_01 as string,",
						"          Actual_CY_02 as string,",
						"          Actual_CY_03 as string,",
						"          Actual_CY_04 as string,",
						"          Actual_CY_05 as string,",
						"          Actual_CY_06 as string,",
						"          Actual_CY_07 as string,",
						"          Actual_CY_08 as string,",
						"          Actual_CY_09 as string,",
						"          Actual_CY_10 as string,",
						"          Actual_CY_11 as string,",
						"          Actual_CY_12 as string,",
						"          BU_Code as string,",
						"          BU_Name as string,",
						"          Currency_Code as string,",
						"          MBR_Scope as string,",
						"          MBR_Month as string,",
						"          CostCenter_Code as string,",
						"          Actual_NY_01 as string,",
						"          Actual_NY_02 as string,",
						"          Actual_NY_03 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Index = {_col0_},",
						"          Anaplant_Index = {_col1_},",
						"          PBI_Index = {_col2_},",
						"          K_Nature = {_col4_},",
						"          Actual_LY_01 = {_col5_},",
						"          Actual_LY_02 = {_col6_},",
						"          Actual_LY_03 = {_col7_},",
						"          Actual_LY_04 = {_col8_},",
						"          Actual_LY_05 = {_col9_},",
						"          Actual_LY_06 = {_col10_},",
						"          Actual_LY_07 = {_col11_},",
						"          Actual_LY_08 = {_col12_},",
						"          Actual_LY_09 = {_col13_},",
						"          Actual_LY_10 = {_col14_},",
						"          Actual_LY_11 = {_col15_},",
						"          Actual_LY_12 = {_col16_},",
						"          Budget_CY_01 = {_col19_},",
						"          Budget_CY_02 = {_col20_},",
						"          Budget_CY_03 = {_col21_},",
						"          Budget_CY_04 = {_col22_},",
						"          Budget_CY_05 = {_col23_},",
						"          Budget_CY_06 = {_col24_},",
						"          Budget_CY_07 = {_col25_},",
						"          Budget_CY_08 = {_col26_},",
						"          Budget_CY_09 = {_col27_},",
						"          Budget_CY_10 = {_col28_},",
						"          Budget_CY_11 = {_col29_},",
						"          Budget_CY_12 = {_col30_},",
						"          Actual_CY_01 = {_col33_},",
						"          Actual_CY_02 = {_col34_},",
						"          Actual_CY_03 = {_col35_},",
						"          Actual_CY_04 = {_col36_},",
						"          Actual_CY_05 = {_col37_},",
						"          Actual_CY_06 = {_col38_},",
						"          Actual_CY_07 = {_col39_},",
						"          Actual_CY_08 = {_col40_},",
						"          Actual_CY_09 = {_col41_},",
						"          Actual_CY_10 = {_col42_},",
						"          Actual_CY_11 = {_col43_},",
						"          Actual_CY_12 = {_col44_},",
						"          Actual_NY_01 = {_col46_},",
						"          Actual_NY_02 = {_col47_},",
						"          Actual_NY_03 = {_col48_},",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month,",
						"          CostCenter_Code",
						"     )) ~> insertRawMBRData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_all_mbr_snowflake')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01ODS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_mbr_pnl_data",
								"type": "DatasetReference"
							},
							"name": "getMBRData",
							"description": "Retrieve Actual CY,LY & Budget"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowf_raw_mbr_pnl_data",
								"type": "DatasetReference"
							},
							"name": "insertRawMBRDataSnowf"
						}
					],
					"transformations": [
						{
							"name": "addMBRMetadata",
							"description": "BU_Code\nBU_Name\nMBR_Scope\nMBR_Month"
						},
						{
							"name": "removeEmptyColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pBU_Code as string,",
						"     pRawTableName as string,",
						"     pMBR_Scope as string,",
						"     pMBR_Month as string,",
						"     pBU_Name as string,",
						"     pCurrency_Code as string,",
						"     pFileName as string",
						"}",
						"source(output(",
						"          {_col0_} as short,",
						"          {_col1_} as string,",
						"          {_col2_} as string,",
						"          {_col3_} as string,",
						"          {_col4_} as string,",
						"          {_col5_} as double,",
						"          {_col6_} as double,",
						"          {_col7_} as double,",
						"          {_col8_} as double,",
						"          {_col9_} as double,",
						"          {_col10_} as double,",
						"          {_col11_} as double,",
						"          {_col12_} as double,",
						"          {_col13_} as double,",
						"          {_col14_} as double,",
						"          {_col15_} as double,",
						"          {_col16_} as double,",
						"          {_col17_} as double,",
						"          {_col18_} as string,",
						"          {_col19_} as double,",
						"          {_col20_} as double,",
						"          {_col21_} as double,",
						"          {_col22_} as double,",
						"          {_col23_} as double,",
						"          {_col24_} as double,",
						"          {_col25_} as double,",
						"          {_col26_} as double,",
						"          {_col27_} as double,",
						"          {_col28_} as double,",
						"          {_col29_} as double,",
						"          {_col30_} as double,",
						"          {_col31_} as double,",
						"          {_col32_} as string,",
						"          {_col33_} as double,",
						"          {_col34_} as double,",
						"          {_col35_} as double,",
						"          {_col36_} as double,",
						"          {_col37_} as double,",
						"          {_col38_} as double,",
						"          {_col39_} as double,",
						"          {_col40_} as double,",
						"          {_col41_} as double,",
						"          {_col42_} as double,",
						"          {_col43_} as double,",
						"          {_col44_} as double,",
						"          {_col45_} as double,",
						"          {_col46_} as double,",
						"          {_col47_} as double,",
						"          {_col48_} as double",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> getMBRData",
						"getMBRData derive(BU_Code = $pBU_Code,",
						"          BU_Name = $pBU_Name,",
						"          Currency_Code = $pCurrency_Code,",
						"          MBR_Scope = $pMBR_Scope,",
						"          MBR_Month = $pMBR_Month,",
						"          CostCenter_Code = left({_col1_},7),",
						"          Created_On = currentTimestamp()) ~> addMBRMetadata",
						"addMBRMetadata select(mapColumn(",
						"          {_col0_},",
						"          {_col1_},",
						"          {_col2_},",
						"          {_col4_},",
						"          {_col5_},",
						"          {_col6_},",
						"          {_col7_},",
						"          {_col8_},",
						"          {_col9_},",
						"          {_col10_},",
						"          {_col11_},",
						"          {_col12_},",
						"          {_col13_},",
						"          {_col14_},",
						"          {_col15_},",
						"          {_col16_},",
						"          {_col19_},",
						"          {_col20_},",
						"          {_col21_},",
						"          {_col22_},",
						"          {_col23_},",
						"          {_col24_},",
						"          {_col25_},",
						"          {_col26_},",
						"          {_col27_},",
						"          {_col28_},",
						"          {_col29_},",
						"          {_col30_},",
						"          {_col33_},",
						"          {_col34_},",
						"          {_col35_},",
						"          {_col36_},",
						"          {_col37_},",
						"          {_col38_},",
						"          {_col39_},",
						"          {_col40_},",
						"          {_col41_},",
						"          {_col42_},",
						"          {_col43_},",
						"          {_col44_},",
						"          {_col46_},",
						"          {_col47_},",
						"          {_col48_},",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month,",
						"          CostCenter_Code,",
						"          Created_On",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> removeEmptyColumns",
						"removeEmptyColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Index as decimal(38,0),",
						"          Anaplant_Index as string,",
						"          PBI_Index as string,",
						"          K_Nature as string,",
						"          Actual_LY_01 as double,",
						"          Actual_LY_02 as double,",
						"          Actual_LY_03 as double,",
						"          Actual_LY_04 as double,",
						"          Actual_LY_05 as double,",
						"          Actual_LY_06 as double,",
						"          Actual_LY_07 as double,",
						"          Actual_LY_08 as double,",
						"          Actual_LY_09 as double,",
						"          Actual_LY_10 as double,",
						"          Actual_LY_11 as double,",
						"          Actual_LY_12 as double,",
						"          Budget_CY_01 as double,",
						"          Budget_CY_02 as double,",
						"          Budget_CY_03 as double,",
						"          Budget_CY_04 as double,",
						"          Budget_CY_05 as double,",
						"          Budget_CY_06 as double,",
						"          Budget_CY_07 as double,",
						"          Budget_CY_08 as double,",
						"          Budget_CY_09 as double,",
						"          Budget_CY_10 as double,",
						"          Budget_CY_11 as double,",
						"          Budget_CY_12 as double,",
						"          Actual_CY_01 as double,",
						"          Actual_CY_02 as double,",
						"          Actual_CY_03 as double,",
						"          Actual_CY_04 as double,",
						"          Actual_CY_05 as double,",
						"          Actual_CY_06 as double,",
						"          Actual_CY_07 as double,",
						"          Actual_CY_08 as double,",
						"          Actual_CY_09 as double,",
						"          Actual_CY_10 as double,",
						"          Actual_CY_11 as double,",
						"          Actual_CY_12 as double,",
						"          Actual_NY_01 as double,",
						"          Actual_NY_02 as double,",
						"          Actual_NY_03 as double,",
						"          BU_Code as string,",
						"          BU_Name as string,",
						"          Currency_Code as string,",
						"          MBR_Scope as string,",
						"          MBR_Month as string,",
						"          CostCenter_Code as string,",
						"          CREATED_ON as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          Index = {_col0_},",
						"          Anaplant_Index = {_col1_},",
						"          PBI_Index = {_col2_},",
						"          K_Nature = {_col4_},",
						"          Actual_LY_01 = {_col5_},",
						"          Actual_LY_02 = {_col6_},",
						"          Actual_LY_03 = {_col7_},",
						"          Actual_LY_04 = {_col8_},",
						"          Actual_LY_05 = {_col9_},",
						"          Actual_LY_06 = {_col10_},",
						"          Actual_LY_07 = {_col11_},",
						"          Actual_LY_08 = {_col12_},",
						"          Actual_LY_09 = {_col13_},",
						"          Actual_LY_10 = {_col14_},",
						"          Actual_LY_11 = {_col15_},",
						"          Actual_LY_12 = {_col16_},",
						"          Budget_CY_01 = {_col19_},",
						"          Budget_CY_02 = {_col20_},",
						"          Budget_CY_03 = {_col21_},",
						"          Budget_CY_04 = {_col22_},",
						"          Budget_CY_05 = {_col23_},",
						"          Budget_CY_06 = {_col24_},",
						"          Budget_CY_07 = {_col25_},",
						"          Budget_CY_08 = {_col26_},",
						"          Budget_CY_09 = {_col27_},",
						"          Budget_CY_10 = {_col28_},",
						"          Budget_CY_11 = {_col29_},",
						"          Budget_CY_12 = {_col30_},",
						"          Actual_CY_01 = {_col33_},",
						"          Actual_CY_02 = {_col34_},",
						"          Actual_CY_03 = {_col35_},",
						"          Actual_CY_04 = {_col36_},",
						"          Actual_CY_05 = {_col37_},",
						"          Actual_CY_06 = {_col38_},",
						"          Actual_CY_07 = {_col39_},",
						"          Actual_CY_08 = {_col40_},",
						"          Actual_CY_09 = {_col41_},",
						"          Actual_CY_10 = {_col42_},",
						"          Actual_CY_11 = {_col43_},",
						"          Actual_CY_12 = {_col44_},",
						"          Actual_NY_01 = {_col46_},",
						"          Actual_NY_02 = {_col47_},",
						"          Actual_NY_03 = {_col48_},",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month,",
						"          CostCenter_Code,",
						"          CREATED_ON = Created_On",
						"     )) ~> insertRawMBRDataSnowf"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_kpipyramid_snowflake')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01ODS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_mbr_kpi_pyramid",
								"type": "DatasetReference"
							},
							"name": "getKPIPyramidData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowf_raw_mbr_pnl_data",
								"type": "DatasetReference"
							},
							"name": "insertKPIPyramidData"
						}
					],
					"transformations": [
						{
							"name": "renameColumns"
						},
						{
							"name": "removeEmptyRows"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pMBR_Month as string",
						"}",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> getKPIPyramidData",
						"getKPIPyramidData select(mapColumn(",
						"          BU = Column_1,",
						"          VERSION = Column_2,",
						"          PERIOD = Column_3,",
						"          COST_CENTER = Column_4,",
						"          PEOPLE_TYPE = Column_5,",
						"          LEVEL_SENIORITY = Column_6,",
						"          ENDOFMONTH_EFT = Column_7,",
						"          SRVC_SALES_BEF_BONIMALI = Column_8,",
						"          BILLABLE_DAYS = Column_9,",
						"          DAILY_RATE = Column_10,",
						"          ANNUAL_DIRECT_COSTS = Column_11,",
						"          ANNUAL_PRODUCTION_DAYS = Column_12,",
						"          DAILY_COST = Column_13",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renameColumns",
						"renameColumns filter(not(isNull(BU))) ~> removeEmptyRows",
						"removeEmptyRows derive(CREATED_ON = currentTimestamp(),",
						"          MBR_MONTH = $pMBR_Month) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Index as decimal(38,0),",
						"          Anaplant_Index as string,",
						"          PBI_Index as string,",
						"          K_Nature as string,",
						"          Actual_LY_01 as double,",
						"          Actual_LY_02 as double,",
						"          Actual_LY_03 as double,",
						"          Actual_LY_04 as double,",
						"          Actual_LY_05 as double,",
						"          Actual_LY_06 as double,",
						"          Actual_LY_07 as double,",
						"          Actual_LY_08 as double,",
						"          Actual_LY_09 as double,",
						"          Actual_LY_10 as double,",
						"          Actual_LY_11 as double,",
						"          Actual_LY_12 as double,",
						"          Budget_CY_01 as double,",
						"          Budget_CY_02 as double,",
						"          Budget_CY_03 as double,",
						"          Budget_CY_04 as double,",
						"          Budget_CY_05 as double,",
						"          Budget_CY_06 as double,",
						"          Budget_CY_07 as double,",
						"          Budget_CY_08 as double,",
						"          Budget_CY_09 as double,",
						"          Budget_CY_10 as double,",
						"          Budget_CY_11 as double,",
						"          Budget_CY_12 as double,",
						"          Actual_CY_01 as double,",
						"          Actual_CY_02 as double,",
						"          Actual_CY_03 as double,",
						"          Actual_CY_04 as double,",
						"          Actual_CY_05 as double,",
						"          Actual_CY_06 as double,",
						"          Actual_CY_07 as double,",
						"          Actual_CY_08 as double,",
						"          Actual_CY_09 as double,",
						"          Actual_CY_10 as double,",
						"          Actual_CY_11 as double,",
						"          Actual_CY_12 as double,",
						"          Actual_NY_01 as double,",
						"          Actual_NY_02 as double,",
						"          Actual_NY_03 as double,",
						"          BU_Code as string,",
						"          BU_Name as string,",
						"          Currency_Code as string,",
						"          MBR_Scope as string,",
						"          MBR_Month as string,",
						"          CostCenter_Code as string,",
						"          CREATED_ON as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> insertKPIPyramidData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_shrp_listoffiles')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01ODS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sharepoint_listofiles_xml",
								"type": "DatasetReference"
							},
							"name": "getListofFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sharepoint_json",
								"type": "DatasetReference"
							},
							"name": "createJSONListofFiles"
						}
					],
					"transformations": [
						{
							"name": "flattenXML"
						},
						{
							"name": "addFileName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pMBR_Scope as string",
						"}",
						"source(output(",
						"          {http://www.w3.org/2005/Atom,feed} as ({http://www.w3.org/2005/Atom,entry} as ({http://www.w3.org/2005/Atom,author} as ({http://www.w3.org/2005/Atom,name} as string), {http://www.w3.org/2005/Atom,category} as ({@scheme} as string, {@term} as string), {http://www.w3.org/2005/Atom,content} as ({@type} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,CheckInComment} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,CheckOutType} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as short, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,ContentTag} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,CustomizedPageStatus} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,ETag} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,Exists} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,IrmEnabled} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,Length} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as integer, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,Level} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,LinkingUri} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,LinkingUrl} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,MajorVersion} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as short, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,MinorVersion} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,Name} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,ServerRelativeUrl} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,TimeCreated} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as timestamp, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,TimeLastModified} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as timestamp, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,Title} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,UIVersion} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as short, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,UIVersionLabel} as double, {http://schemas.microsoft.com/ado/2007/08/dataservices,UniqueId} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string))), {http://www.w3.org/2005/Atom,id} as string, {http://www.w3.org/2005/Atom,link} as ({@href} as string, {@rel} as string, {@title} as string, {@type} as string)[], {http://www.w3.org/2005/Atom,title} as string, {http://www.w3.org/2005/Atom,updated} as timestamp)[], {http://www.w3.org/2005/Atom,id} as string, {http://www.w3.org/2005/Atom,title} as string, {http://www.w3.org/2005/Atom,updated} as timestamp)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true,",
						"     validationMode: 'none',",
						"     namespaces: true) ~> getListofFiles",
						"getListofFiles foldDown(unroll({http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}),",
						"     mapColumn(",
						"          GetFileUrl = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,id},",
						"          LinkingUri = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,content}.{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties}.{http://schemas.microsoft.com/ado/2007/08/dataservices,LinkingUri},",
						"          LinkingUrl = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,content}.{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties}.{http://schemas.microsoft.com/ado/2007/08/dataservices,ServerRelativeUrl},",
						"          ServerRelativeUrl = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,content}.{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties}.{http://schemas.microsoft.com/ado/2007/08/dataservices,ServerRelativeUrl},",
						"          Name = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,content}.{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties}.{http://schemas.microsoft.com/ado/2007/08/dataservices,Name}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenXML",
						"flattenXML derive(FileName = concat('toloadSharepoint/02ListFilesToCopy/ListFilesToLoad_',$pMBR_Scope,'.json'),",
						"          GetFileUrl = concat(replace(GetFileUrl,'https://keyrusgroup.sharepoint.com',''),'/$value')) ~> addFileName",
						"addFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LinkingUri as string,",
						"          LinkingUrl as string,",
						"          ServerRelativeUrl as string,",
						"          Name as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> createJSONListofFiles"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_stg_financials')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference"
							},
							"name": "getMBRUnpvtData"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getFactConversionRate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stg_financials",
								"type": "DatasetReference"
							},
							"name": "insertMBRStagingData"
						}
					],
					"transformations": [
						{
							"name": "addColumns",
							"description": "Add Columns : \nScenario\nMonthYear"
						},
						{
							"name": "convertToEuro"
						},
						{
							"name": "cleanColumns"
						},
						{
							"name": "addPeriodYYYYMM01"
						},
						{
							"name": "filterColumns"
						},
						{
							"name": "unpvtConversionRate"
						},
						{
							"name": "spliCurrency"
						},
						{
							"name": "addPeriodCode"
						},
						{
							"name": "fCAD"
						},
						{
							"name": "fUSD"
						},
						{
							"name": "fEUR"
						},
						{
							"name": "fBRL"
						},
						{
							"name": "EUR"
						},
						{
							"name": "CAD"
						},
						{
							"name": "USD"
						},
						{
							"name": "BRL"
						},
						{
							"name": "joinEUR"
						},
						{
							"name": "joinUSD"
						},
						{
							"name": "joinCAD"
						},
						{
							"name": "joinBRL"
						}
					],
					"scriptLines": [
						"parameters{",
						"     unpvtTableName as string",
						"}",
						"source(output(",
						"          Index as string,",
						"          Anaplant_Index as string,",
						"          PBI_Index as string,",
						"          K_Nature as string,",
						"          BU_Code as string,",
						"          BU_Name as string,",
						"          Currency_Code as string,",
						"          MBR_Scope as string,",
						"          MBR_Month as string,",
						"          CostCenter_Code as string,",
						"          Period as string,",
						"          Value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [ods].[{$unpvtTableName}]\"),",
						"     format: 'query') ~> getMBRUnpvtData",
						"source(output(",
						"          CurrencyID as long,",
						"          InputCurrency as string,",
						"          OutputCurrency as string,",
						"          CurrencyPair as string,",
						"          MonthYear as timestamp,",
						"          MonthYearID as integer,",
						"          Actual_LY as double,",
						"          Budget_CY as double,",
						"          Actual_CY as double,",
						"          Forecast_CY as double,",
						"          Forecast_NY as double",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getFactConversionRate",
						"getMBRUnpvtData derive(Scenario = case( \r",
						"    like(Period, 'Actual%'),\r",
						"    'Actual',\r",
						"    case( like(Period, 'Budget%'),'Budget','Forecast')\r",
						"    ),",
						"          MonthYear = case(\r",
						"like(Period,'%CY%'),\r",
						"toDate(concat(toString(year(toDate(MBR_Month))), '-',right(Period,2))),\r",
						"case(\r",
						"like(Period,'%LY%'),\r",
						"toDate(concat(toString(year(toDate(MBR_Month))-1), '-',right(Period,2))),\r",
						"toDate(concat(toString(year(toDate(MBR_Month))+1), '-',right(Period,2)))\r",
						")\r",
						"),",
						"          Index = toInteger(Index),",
						"          Value = toFloat(Value)) ~> addColumns",
						"joinBRL derive(ValueEuro = Value * EURValue,",
						"          ValueUSD = Value * USDValue,",
						"          ValueCAD = Value * CADValue,",
						"          ValueBRL = Value * BRLValue) ~> convertToEuro",
						"convertToEuro select(mapColumn(",
						"          BusinessUnit = BU_Name,",
						"          Scenario,",
						"          NatureID = Index,",
						"          Nature = K_Nature,",
						"          CurrencyCode = Currency_Code,",
						"          CostCenterCode = CostCenter_Code,",
						"          MonthYear,",
						"          MonthYearID = PeriodYYYYMM01,",
						"          MBR_Month,",
						"          Value,",
						"          ValueEuro,",
						"          ValueUSD,",
						"          ValueCAD,",
						"          ValueBRL",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanColumns",
						"addColumns derive(PeriodYYYYMM01 = toInteger(concat(toString(year(MonthYear)),right(concat('0',toString(month(MonthYear))),2), '01'))) ~> addPeriodYYYYMM01",
						"getFactConversionRate select(mapColumn(",
						"          InputCurrency,",
						"          OutputCurrency,",
						"          MonthYearID,",
						"          MonthYear,",
						"          Actual_LY,",
						"          Budget_CY,",
						"          Actual_CY,",
						"          Forecast_CY,",
						"          Forecast_NY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> filterColumns",
						"filterColumns unpivot(output(",
						"          Period as string,",
						"          Value as double",
						"     ),",
						"     ungroupBy(InputCurrency,",
						"          OutputCurrency,",
						"          MonthYearID,",
						"          MonthYear),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpvtConversionRate",
						"addPeriodCode split(OutputCurrency =='EUR',",
						"     OutputCurrency == 'USD',",
						"     OutputCurrency =='CAD',",
						"     disjoint: true) ~> spliCurrency@(sEUR, sUSD, sCAD, sBRL)",
						"unpvtConversionRate derive(Period = concat(Period,'_', right(concat('0',toString(month(MonthYear))),2))) ~> addPeriodCode",
						"spliCurrency@sCAD filter(equals(OutputCurrency, \"CAD\")) ~> fCAD",
						"spliCurrency@sUSD filter(equals(OutputCurrency, 'USD')) ~> fUSD",
						"spliCurrency@sEUR filter(equals(OutputCurrency, 'EUR')) ~> fEUR",
						"spliCurrency@sBRL filter(equals(OutputCurrency, 'BRL')) ~> fBRL",
						"fEUR select(mapColumn(",
						"          EURInputCurrency = InputCurrency,",
						"          EUROutputCurrency = OutputCurrency,",
						"          EURMonthYearID = MonthYearID,",
						"          EURMonthYear = MonthYear,",
						"          EURPeriod = Period,",
						"          EURValue = Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> EUR",
						"fCAD select(mapColumn(",
						"          CADInputCurrency = InputCurrency,",
						"          CADOutputCurrency = OutputCurrency,",
						"          CADMonthYearID = MonthYearID,",
						"          CADMonthYear = MonthYear,",
						"          CADPeriod = Period,",
						"          CADValue = Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CAD",
						"fUSD select(mapColumn(",
						"          USDInputCurrency = InputCurrency,",
						"          USDOutputCurrency = OutputCurrency,",
						"          USDMonthYearID = MonthYearID,",
						"          USDMonthYear = MonthYear,",
						"          USDPeriod = Period,",
						"          USDValue = Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> USD",
						"fBRL select(mapColumn(",
						"          BRLInputCurrency = InputCurrency,",
						"          BRLOutputCurrency = OutputCurrency,",
						"          BRLMonthYearID = MonthYearID,",
						"          BRLMonthYear = MonthYear,",
						"          BRLPeriod = Period,",
						"          BRLValue = Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BRL",
						"addPeriodYYYYMM01, EUR join(Currency_Code == EURInputCurrency",
						"     && Period == EURPeriod",
						"     && PeriodYYYYMM01 == EURMonthYearID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEUR",
						"joinEUR, USD join(Currency_Code == USDInputCurrency",
						"     && Period == USDPeriod",
						"     && PeriodYYYYMM01 == USDMonthYearID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinUSD",
						"joinUSD, CAD join(Currency_Code == CADInputCurrency",
						"     && Period == CADPeriod",
						"     && PeriodYYYYMM01 == CADMonthYearID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCAD",
						"joinCAD, BRL join(Currency_Code == BRLInputCurrency",
						"     && Period == BRLPeriod",
						"     && PeriodYYYYMM01 == BRLMonthYearID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinBRL",
						"cleanColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          BusinessUnit as string,",
						"          Scenario as string,",
						"          NatureID as integer,",
						"          Nature as string,",
						"          MonthYear as timestamp,",
						"          Value as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> insertMBRStagingData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_stg_kpi_pyramid')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference"
							},
							"name": "getMBRKpiPyramid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stg_kpi_pyramid",
								"type": "DatasetReference"
							},
							"name": "insertMBRStagingData"
						}
					],
					"transformations": [
						{
							"name": "castColumns"
						},
						{
							"name": "removeEmptyRows"
						},
						{
							"name": "nulltoZero"
						}
					],
					"scriptLines": [
						"parameters{",
						"     kpiPyramidTableName as string",
						"}",
						"source(output(",
						"          BU as string,",
						"          Version as string,",
						"          Period as string,",
						"          CostCenter as string,",
						"          PeopleType as string,",
						"          LevelSeniority as string,",
						"          EndOfMonth_FTE as string,",
						"          SrvcSales_bef_bonimali as string,",
						"          BillableDays as string,",
						"          DailyRate as string,",
						"          AnnualDirectCosts as string,",
						"          AnnualProductionDays as string,",
						"          DailyCost as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [ods].[{$kpiPyramidTableName}]\"),",
						"     format: 'query') ~> getMBRKpiPyramid",
						"removeEmptyRows cast(output(",
						"          Period as date 'yyyy-MM-dd',",
						"          EndOfMonth_FTE as float,",
						"          SrvcSales_bef_bonimali as float,",
						"          BillableDays as float,",
						"          DailyRate as float,",
						"          AnnualDirectCosts as float,",
						"          AnnualProductionDays as float,",
						"          DailyCost as float",
						"     ),",
						"     errors: true) ~> castColumns",
						"getMBRKpiPyramid filter(not(isNull(BU))) ~> removeEmptyRows",
						"castColumns derive(EndOfMonth_FTE = iifNull(EndOfMonth_FTE,0),",
						"          SrvcSales_bef_bonimali = iifNull(SrvcSales_bef_bonimali,0),",
						"          BillableDays = iifNull(BillableDays,0),",
						"          DailyRate = iifNull(DailyRate,0),",
						"          AnnualDirectCosts = iifNull(AnnualDirectCosts,0),",
						"          AnnualProductionDays = iifNull(AnnualProductionDays,0),",
						"          DailyCost = iifNull(DailyCost,0)) ~> nulltoZero",
						"nulltoZero sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> insertMBRStagingData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_unpvt_mbr_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01ODS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference"
							},
							"name": "getMBRData",
							"description": "Retrieve data from the raw MBR sql table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_unpvtdata_table",
								"type": "DatasetReference"
							},
							"name": "InsertUnpvtMBRData",
							"description": "Create and insert unpivot MBR data in the corresponding table"
						}
					],
					"transformations": [
						{
							"name": "UnpivotMBRData",
							"description": "Unpivot MBR Data to group by Period"
						}
					],
					"scriptLines": [
						"parameters{",
						"     RawTableName as string,",
						"     UnpivotTableName as string",
						"}",
						"source(output(",
						"          Index as string,",
						"          Anaplant_Index as string,",
						"          PBI_Index as string,",
						"          K_Nature as string,",
						"          Actual_LY_01 as string,",
						"          Actual_LY_02 as string,",
						"          Actual_LY_03 as string,",
						"          Actual_LY_04 as string,",
						"          Actual_LY_05 as string,",
						"          Actual_LY_06 as string,",
						"          Actual_LY_07 as string,",
						"          Actual_LY_08 as string,",
						"          Actual_LY_09 as string,",
						"          Actual_LY_10 as string,",
						"          Actual_LY_11 as string,",
						"          Actual_LY_12 as string,",
						"          Budget_CY_01 as string,",
						"          Budget_CY_02 as string,",
						"          Budget_CY_03 as string,",
						"          Budget_CY_04 as string,",
						"          Budget_CY_05 as string,",
						"          Budget_CY_06 as string,",
						"          Budget_CY_07 as string,",
						"          Budget_CY_08 as string,",
						"          Budget_CY_09 as string,",
						"          Budget_CY_10 as string,",
						"          Budget_CY_11 as string,",
						"          Budget_CY_12 as string,",
						"          Actual_CY_01 as string,",
						"          Actual_CY_02 as string,",
						"          Actual_CY_03 as string,",
						"          Actual_CY_04 as string,",
						"          Actual_CY_05 as string,",
						"          Actual_CY_06 as string,",
						"          Actual_CY_07 as string,",
						"          Actual_CY_08 as string,",
						"          Actual_CY_09 as string,",
						"          Actual_CY_10 as string,",
						"          Actual_CY_11 as string,",
						"          Actual_CY_12 as string,",
						"          BU_Code as string,",
						"          BU_Name as string,",
						"          Currency_Code as string,",
						"          MBR_Scope as string,",
						"          MBR_Month as string,",
						"          CostCenter_Code as string,",
						"          Actual_NY_01 as string,",
						"          Actual_NY_02 as string,",
						"          Actual_NY_03 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getMBRData",
						"getMBRData unpivot(output(",
						"          Period as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy(Index,",
						"          Anaplant_Index,",
						"          PBI_Index,",
						"          K_Nature,",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month,",
						"          CostCenter_Code),",
						"     lateral: false,",
						"     ignoreNullPivots: true) ~> UnpivotMBRData",
						"UnpivotMBRData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> InsertUnpvtMBRData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_01_get_files_sharepoint')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Sharepoint Folder to Load",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  [MBR_Scope]\n      ,[SharepointFolder]\n      ,[Active_fl]\n  FROM [cfg].[@{pipeline().globalParameters.gSourcesTableName}]\n  WHERE [Active_fl]= 'Y'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_cfg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Sharepoint Folder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Sharepoint Folder to Load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Sharepoint Folder to Load').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get List of Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization:Bearer ',activity('Get token').output.access_token)}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_sharepoint_ocean_project",
											"type": "DatasetReference",
											"parameters": {
												"pShrepointFolder": {
													"value": "@item().SharepointFolder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "mbr_landing_zone",
											"type": "DatasetReference",
											"parameters": {
												"pMBR_Folder": {
													"value": "@item().MBR_Scope",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Extract List of files",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Get List of Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_shrp_listoffiles",
											"type": "DataFlowReference",
											"parameters": {
												"pMBR_Scope": {
													"value": "'@{item().MBR_Scope}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"getListofFiles": {
													"pMBR_Scope": {
														"value": "@item().MBR_Scope",
														"type": "Expression"
													}
												},
												"createJSONListofFiles": {
													"pMBR_Scope": {
														"value": "@item().MBR_Scope",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine",
										"runConcurrently": true
									}
								},
								{
									"name": "Copy file to blob",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Extract List of files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_02_copy_files_to_blob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pMBR_Scope": {
												"value": "@item().MBR_Scope",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://accounts.accesscontrol.windows.net/168e48b2-81f0-4aac-bc77-d58d07d205e2/tokens/OAuth/2",
							"connectVia": {
								"referenceName": "integrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": "grant_type=client_credentials&client_id=63bb52e3-0d92-4899-991c-bda347d9dd3b@168e48b2-81f0-4aac-bc77-d58d07d205e2&client_secret=S8v8Q~jvkg-AXO-gSxyxnJQTd9zhR1SiPr0ukcz5&resource=00000003-0000-0ff1-ce00-000000000000/keyrusgroup.sharepoint.com@168e48b2-81f0-4aac-bc77-d58d07d205e2"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00INIT"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_shrp_listoffiles')]",
				"[concat(variables('factoryId'), '/pipelines/pl_02_copy_files_to_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_01_load_fact_financials')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All Staging Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  MBR_UnpvtTableName, CONCAT('P&L_FI_', MBR_Scope, '_', MBR_BU_Code) AS StgFinancialTableName  from  [@{pipeline().globalParameters.gODSSchemaName}].[@{pipeline().globalParameters.gSourcesConfigTableName}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesConfigTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Staging Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get All Staging Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All Staging Data').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Load Fact Financials",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_Load_Fact_Financials",
											"type": "DataFlowReference",
											"parameters": {
												"pPipelineRunID": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"getMBRStagingData": {
													"vTableName": {
														"value": "@item().StgFinancialTableName",
														"type": "Expression"
													}
												},
												"getDimScenario": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimScenarioTableName",
														"type": "Expression"
													}
												},
												"getDimNature": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimNatureTableName",
														"type": "Expression"
													}
												},
												"getDimOrganisation": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimOrganisationTableName",
														"type": "Expression"
													}
												},
												"getFactFinancials": {
													"FactName": {
														"value": "@pipeline().globalParameters.gFactFinancialsTableName",
														"type": "Expression"
													}
												},
												"getFactDrivers": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gFactDriversTableName",
														"type": "Expression"
													}
												},
												"getDimKPI": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimKPITableName",
														"type": "Expression"
													}
												},
												"getDimCostCenter": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimCostCenterTableName",
														"type": "Expression"
													}
												},
												"insertFactFinancials": {
													"FactName": {
														"value": "@pipeline().globalParameters.gFactFinancialsTableName",
														"type": "Expression"
													}
												},
												"insertFactDrivers": {
													"FactName": {
														"value": "@pipeline().globalParameters.gFactDriversTableName",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Summary Log Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach Staging Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_03_summary_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "03DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T16:37:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_03_summary_log')]",
				"[concat(variables('factoryId'), '/dataflows/df_Load_Fact_Financials')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_01_load_stg_financials')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Unpvt Data Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get All Unpvt Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All Unpvt Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Staging Financial Table",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_stg_financials",
											"type": "DataFlowReference",
											"parameters": {
												"unpvtTableName": {
													"value": "'@{item().MBR_UnpvtTableName}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"getMBRUnpvtData": {
													"vTableName": {
														"value": "@item().MBR_UnpvtTableName",
														"type": "Expression"
													}
												},
												"getFactConversionRate": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gFactCurrencyConversionTableName",
														"type": "Expression"
													}
												},
												"insertMBRStagingData": {
													"stgFinancialTable": {
														"value": "@item().StgFinancialTableName",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Get All Unpvt Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  MBR_UnpvtTableName, CONCAT('P&L_FI_', MBR_Scope, '_', MBR_BU_Code) AS StgFinancialTableName  from  [@{pipeline().globalParameters.gODSSchemaName}].[@{pipeline().globalParameters.gSourcesConfigTableName}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesConfigTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "02STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-20T11:30:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_stg_financials')]"
			]
		}
	]
}