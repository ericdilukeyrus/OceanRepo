{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ocean-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_02_ingest_mbr_data_ods_sf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move all import tables from the source systems",
				"activities": [
					{
						"name": "Copy MBR Parameters",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DROP TABLE IF EXISTS ods.R_MBR_Parameters_@{pipeline().parameters.pMBRScope}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "Prop_0",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Prop_1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_mbr_parameters",
								"type": "DatasetReference",
								"parameters": {
									"pFileName": {
										"value": "@pipeline().parameters.pFileName",
										"type": "Expression"
									},
									"pFolderName": {
										"value": "@pipeline().parameters.pFolderName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@concat('R_MBR_Parameters_',pipeline().parameters.pMBRScope)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy MBR Currency",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DROP TABLE IF EXISTS ods.R_MBR_Currency_@{pipeline().parameters.pMBRScope}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "bu_sequence",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "bu_name",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "currency_code",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "bu_select",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_mbr_currency",
								"type": "DatasetReference",
								"parameters": {
									"pFileName": {
										"value": "@pipeline().parameters.pFileName",
										"type": "Expression"
									},
									"pFolderName": {
										"value": "@pipeline().parameters.pFolderName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@concat('R_MBR_Currency_',pipeline().parameters.pMBRScope)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get MBR Parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy MBR Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy MBR Currency",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select a.Prop_1 as MBR_Scope, b.Prop_1 as MBR_Month,  CONCAT('P&L FI_', bu_sequence ) AS SheetName, bu_sequence AS BU_Code, bu_name as BU_Name,\nCONCAT('R_P&L_FI_', a.Prop_1, '_',bu_sequence) AS RawTableName,  CONCAT('U_P&L_FI_', a.Prop_1, '_', bu_sequence) AS UnpvtTableName, currency_code as Currency_Code,\nCONCAT('R_KPI_Pyramid_', a.Prop_1) AS KPIPyramidTableName\nfrom ods.R_MBR_Currency_@{pipeline().parameters.pMBRScope},\n(select Prop_1 from ods.R_MBR_Parameters_@{pipeline().parameters.pMBRScope}\nwhere Prop_0 = 'MBR SCOPE') a,\n(select Prop_1 from ods.R_MBR_Parameters_@{pipeline().parameters.pMBRScope}\nwhere Prop_0 = 'MONTH') b\nwhere bu_select is not null",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@concat('R_MBR_Currency_',pipeline().parameters.pMBRScope)",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Business Units sheets",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MBR Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MBR Parameters').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Copy MBR Files to Snowflake",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_copy_all_mbr_snowflake",
											"type": "DataFlowReference",
											"parameters": {
												"pBU_Code": {
													"value": "'@{item().BU_Code}'",
													"type": "Expression"
												},
												"pRawTableName": {
													"value": "'@{toUpper(replace(item().RawTableName,'&',''))}'",
													"type": "Expression"
												},
												"pMBR_Scope": {
													"value": "'@{item().MBR_Scope}'",
													"type": "Expression"
												},
												"pMBR_Month": {
													"value": "'@{item().MBR_Month}'",
													"type": "Expression"
												},
												"pBU_Name": {
													"value": "'@{item().BU_Name}'",
													"type": "Expression"
												},
												"pCurrency_Code": {
													"value": "'@{item().Currency_Code}'",
													"type": "Expression"
												},
												"pFileName": {
													"value": "'@{pipeline().parameters.pFileName}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"getMBRData": {
													"vSheetName": {
														"value": "@item().SheetName",
														"type": "Expression"
													},
													"vFileName": {
														"value": "@pipeline().parameters.pFileName",
														"type": "Expression"
													},
													"vFolderName": {
														"value": "@pipeline().parameters.pFolderName",
														"type": "Expression"
													}
												},
												"insertRawMBRDataSnowf": {
													"pRawTableName": {
														"value": "@toUpper(replace(item().RawTableName,'&',''))",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Copy KPI Pyramid to Snowfale",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Get MBR Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_copy_kpipyramid_snowflake",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"getKPIPyramidData": {
										"pFileName": {
											"value": "@pipeline().parameters.pFileName",
											"type": "Expression"
										},
										"pFolderName": {
											"value": "@pipeline().parameters.pFolderName",
											"type": "Expression"
										}
									},
									"insertKPIPyramidData": {
										"pRawTableName": {
											"value": "@toUpper(concat('R_KPI_Pyramid_',pipeline().parameters.pMBRScope))",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pFileName": {
						"type": "string"
					},
					"pFolderName": {
						"type": "string"
					},
					"pMBRScope": {
						"type": "string"
					}
				},
				"variables": {
					"vplShetName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01ODS/Snowflake"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-20T10:35:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_02_load_fact_kpipyramid')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All Staging Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  distinct concat('KPI_Pyramid_', MBR_Scope) AS StgKpiTableName, MBR_Month  from  [@{pipeline().globalParameters.gODSSchemaName}].[@{pipeline().globalParameters.gSourcesConfigTableName}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesConfigTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Staging Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get All Staging Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All Staging Data').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Load Fact KPI Pyramid",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_Load_Fact_KPI_Pyramid",
											"type": "DataFlowReference",
											"parameters": {
												"pMBR_Month": {
													"value": "'@{item().MBR_Month}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"getMBRKPIPyramidStaging": {
													"vTableName": {
														"value": "@item().StgKpiTableName",
														"type": "Expression"
													}
												},
												"getDimScenario": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimScenarioTableName",
														"type": "Expression"
													}
												},
												"getDimOrganisation": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimOrganisationTableName",
														"type": "Expression"
													}
												},
												"getFactKpi": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gFactKpiPyramid",
														"type": "Expression"
													}
												},
												"getDimPeopleType": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimPeopleType",
														"type": "Expression"
													}
												},
												"getDimSeniorityLevel": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimSeniorityLevel",
														"type": "Expression"
													}
												},
												"getDimCostCenter": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gDimCostCenterTableName",
														"type": "Expression"
													}
												},
												"insertFactKPIPyramid": {
													"vTableName": {
														"value": "@pipeline().globalParameters.gFactKpiPyramid",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "03DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T16:37:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_02_load_stg_kpi_pyramid')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach KPI Pyramid ODS Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get All KPI Pyramid ODS Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All KPI Pyramid ODS Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Staging KPI Pyramid Tables",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_stg_kpi_pyramid",
											"type": "DataFlowReference",
											"parameters": {
												"kpiPyramidTableName": {
													"value": "'@{item().MBR_KPIPyramid_TableName}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"getMBRKpiPyramid": {
													"vTableName": {
														"value": "@item().MBR_KPIPyramid_TableName",
														"type": "Expression"
													}
												},
												"insertMBRStagingData": {
													"pKpiPyramidTableName": {
														"value": "@item().StgTableName",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Get All KPI Pyramid ODS Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  distinct MBR_KPIPyramid_TableName,  concat('KPI_Pyramid_', MBR_Scope) as StgTableName from  [@{pipeline().globalParameters.gODSSchemaName}].[@{pipeline().globalParameters.gSourcesConfigTableName}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesConfigTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "02STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-20T11:30:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_01_read_all_MBR_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MBR All Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_mbr_landing_folder",
								"type": "DatasetReference",
								"parameters": {
									"MBRScope": {
										"value": "@pipeline().parameters.MBRScope_Folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach MBR Files by Scope",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MBR All Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MBR All Files').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Ingest MBR Data",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_02_ingest_mbr_data_ods",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pFileName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"pFolderName": {
												"value": "@pipeline().parameters.MBRScope_Folder",
												"type": "Expression"
											},
											"pMBRScope": {
												"value": "@pipeline().parameters.MBR_Scope",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MBRScope_Folder": {
						"type": "string"
					},
					"MBR_Scope": {
						"type": "string"
					}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01ODS"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-20T08:54:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_01_read_all_MBR_files_sf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MBR All Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_mbr_landing_folder",
								"type": "DatasetReference",
								"parameters": {
									"MBRScope": {
										"value": "@pipeline().parameters.MBRScope_Folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach MBR Files by Scope",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MBR All Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MBR All Files').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Ingest MBR Data",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_02_ingest_mbr_data_ods_sf",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pFileName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"pFolderName": {
												"value": "@pipeline().parameters.MBRScope_Folder",
												"type": "Expression"
											},
											"pMBRScope": {
												"value": "@pipeline().parameters.MBR_Scope",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MBRScope_Folder": {
						"type": "string"
					},
					"MBR_Scope": {
						"type": "string"
					}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01ODS/Snowflake"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-20T08:54:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_02_ingest_mbr_data_ods_sf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_00_start_process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All Active MBR Scope",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy Files from Sharepoint",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [MBR_Scope] as MBRScope,\n    'toload/' + [MBR_Scope]  as MBRScope_Folder\n  FROM [cfg].[@{pipeline().globalParameters.gSourcesTableName}]\nWHERE [Active_fl] = 'Y'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_cfg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Active MBR Scope",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get All Active MBR Scope",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All Active MBR Scope').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run Process by MBR Scope",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_01_read_all_MBR_files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MBRScope_Folder": {
												"value": "@item().MBRScope_Folder",
												"type": "Expression"
											},
											"MBR_Scope": {
												"value": "@item().MBRScope",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Load Financials Staging Tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach Active MBR Scope",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_01_load_stg_financials",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Fact Tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Financials Staging Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load KPI Pyramid Staging Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_01_load_fact_financials",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Initialization",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_00_initialization",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy Files from Sharepoint",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Initialization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_01_get_files_sharepoint",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load KPI Pyramid Staging Tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach Active MBR Scope",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_02_load_stg_kpi_pyramid",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Fact KPI Pyramid",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Financials Staging Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load KPI Pyramid Staging Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_02_load_fact_kpipyramid",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archives MBR Files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Fact Tables",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							},
							{
								"activity": "Load Fact KPI Pyramid",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							},
							{
								"activity": "ForEach Active MBR Scope",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Load Financials Staging Tables",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_04_archive_files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T13:38:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_02_load_stg_kpi_pyramid')]",
				"[concat(variables('factoryId'), '/pipelines/pl_02_load_fact_kpipyramid')]",
				"[concat(variables('factoryId'), '/pipelines/pl_01_read_all_MBR_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_00_start_process_snowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All Active MBR Scope",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy Files from Sharepoint",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [MBR_Scope] as MBRScope,\n    'toload/' + [MBR_Scope]  as MBRScope_Folder\n  FROM [cfg].[@{pipeline().globalParameters.gSourcesTableName}]\nWHERE [Active_fl] = 'Y'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ocean_cfg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": {
										"value": "@pipeline().globalParameters.gSourcesTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Active MBR Scope",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get All Active MBR Scope",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All Active MBR Scope').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run Process by MBR Scope",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_01_read_all_MBR_files_sf",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MBRScope_Folder": {
												"value": "@item().MBRScope_Folder",
												"type": "Expression"
											},
											"MBR_Scope": {
												"value": "@item().MBRScope",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Initialization",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_00_initialization",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy Files from Sharepoint",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Initialization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_01_get_files_sharepoint",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archives MBR Files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach Active MBR Scope",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_04_archive_files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Archives MBR Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T13:38:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_01_read_all_MBR_files_sf')]"
			]
		}
	]
}