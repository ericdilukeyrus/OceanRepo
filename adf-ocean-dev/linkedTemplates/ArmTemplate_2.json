{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ocean-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_sharepoint_listofiles_xml')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_files_to_load",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pMBR_Scope": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "ListFiles_@{dataset().pMBR_Scope}.xml",
							"type": "Expression"
						},
						"folderPath": "toloadSharepoint/01ListFilesFromSharepoint",
						"container": "mbr-landing-zone"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sharepoint_foldercontent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dimensions_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "toload/Canada",
						"container": "mbr-landing-zone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sharepoint_xml')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dimensions_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "toloadSharepoint/01ListFilesFromSharepoint",
						"container": "mbr-landing-zone"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sharepoint_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dimensions_source",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pMBR_Scope": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "ListFilesToLoad_@{dataset().pMBR_Scope}.json",
							"type": "Expression"
						},
						"folderPath": "toloadSharepoint/02ListFilesToCopy",
						"container": "mbr-landing-zone"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"LinkingUri": {
							"type": "string"
						},
						"LinkingUrl": {
							"type": "string"
						},
						"ServerRelativeUrl": {
							"type": "string"
						},
						"Name": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sharepoint_ocean_project_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharepointOceanProject",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pServerRelativeUrl": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01ODS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().pServerRelativeUrl",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dimensions_source",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pMBR_Scope": {
						"type": "string"
					},
					"pFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().pFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "toload/@{dataset().pMBR_Scope}",
							"type": "Expression"
						},
						"container": "mbr-landing-zone"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cfg_file_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "mbr_file_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get File Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[cfg].[prc_file_metadata_output]",
							"storedProcedureParameters": {
								"JSON": {
									"value": {
										"value": "@activity('Get File Metadata').output",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ocean_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T11:34:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_ic_declaration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stg_mbr_ic_declaration",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.R_MBR_Licence_maintenance",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "BU",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Version",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Period",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Software partners",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "License - Perpetual",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "License - New subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "Maintenance - 1st year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "License - Renewed subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "Maintenance - Renewal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "License - Referrals",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "Total Revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "License purchases - Perpetual",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "License purchases - New subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "Maintenance purchases - 1st year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "License purchases - Renewed subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "Maintenance purchases - Renewal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "Total cost",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "Licenses - Perpetual - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "Licenses - New Subscription - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "Maintenance - 1st year - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "Licenses - Renewed subscription - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "Maintenance - Renewal - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "Licenses - Referrals - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "Total Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "Licenses - Perpetual - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 26
										},
										"sink": {
											"name": "Licenses - New Subscription - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "Maintenance - 1st year - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 28
										},
										"sink": {
											"name": "Licenses - Renewed subscription - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 29
										},
										"sink": {
											"name": "Maintenance - Renewal - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 30
										},
										"sink": {
											"name": "Licenses - Referrals - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 31
										},
										"sink": {
											"name": "Total Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mbr_licence_maintenance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "R_MBR_licence_maintenance"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T13:29:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_index')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ods_mbr_index",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "idx",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "anaplan_idx",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "pbi_idx",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "k_cad",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mbr_index",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "R_MBR_Index"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T10:38:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_kpi_pyramid')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stg_mbr_kpi_pyramid",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.R_MBR_kpi_pyramid",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "BU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BU",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Version",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Version",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Period",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Cost center",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Cost center",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "People type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "People type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Level of seniority",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Level of seniority",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "End of month FTE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "End of month FTE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Service sales before boni / mali",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Service sales before boni / mali",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Billable days",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Billable days",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Daily rate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Daily rate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Annual direct costs",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Annual direct costs",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Annual production days",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Annual production days",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Daily cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Daily cost",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mbr_kpi_pyramide",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "R_MBR_kpi_pyramid"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T13:29:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_licence_maintenance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stg_mbr_licence_maintenance",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "BU",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Version",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Period",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Software partners",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "License - Perpetual",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "License - New subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "Maintenance - 1st year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "License - Renewed subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "Maintenance - Renewal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "License - Referrals",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "Total Revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "License purchases - Perpetual",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "License purchases - New subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "Maintenance purchases - 1st year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "License purchases - Renewed subscription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "Maintenance purchases - Renewal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "Total cost",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "Licenses - Perpetual - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "Licenses - New Subscription - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "Maintenance - 1st year - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "Licenses - Renewed subscription - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "Maintenance - Renewal - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "Licenses - Referrals - Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "Total Margin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "Licenses - Perpetual - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 26
										},
										"sink": {
											"name": "Licenses - New Subscription - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "Maintenance - 1st year - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 28
										},
										"sink": {
											"name": "Licenses - Renewed subscription - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 29
										},
										"sink": {
											"name": "Maintenance - Renewal - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 30
										},
										"sink": {
											"name": "Licenses - Referrals - Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 31
										},
										"sink": {
											"name": "Total Margin %",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mbr_licence_maintenance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "R_MBR_licence_maintenance"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T13:29:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_nature')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ods_mbr_nature",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mbr_nature",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "R_MBR_Nature"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T10:38:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods_mbr_scope_dynamic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Range Cells",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Range",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Load to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE ods.[@{item().SheetName}]",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "mbr_dynamic_source",
											"type": "DatasetReference",
											"parameters": {
												"vRange": {
													"value": "@item().Range",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ocean_dwh",
											"type": "DatasetReference",
											"parameters": {
												"vTableName": {
													"value": "@item().SheetName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Range": {
						"type": "array",
						"defaultValue": [
							{
								"Range": "CP8:DA503"
							}
						]
					}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T13:29:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_05_summary_log')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Log Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": " select [MBR_FileName] as MBRFileName, [MBR_Scope] as MBRScope,[MBR_Month] as MBRMonth\n  ,[MBR_Currency_Code] as MBRCurrCode ,[MBR_BU_Code] as MBRBUCode ,[MBR_BU_Name] as MBRBUName ,[MBR_SheetName] as MBRSheetName from  [ods].[Sources_Config]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MBRFileName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRScope",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_Scope",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRMonth",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_Month",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRCurrCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_Currency_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRBUCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_BU_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRBUName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_BU_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MBRSheetName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MBR_SheetName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "Sources_Config"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference",
								"parameters": {
									"vTableName": "SummaryLoad"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "03DWH"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Sheets",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.SheetName",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Load Dimensions to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE ods.[@{item().SheetName}]",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "mbr_dimensions",
											"type": "DatasetReference",
											"parameters": {
												"vSheetName": {
													"value": "@item().SheetName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ocean_ods",
											"type": "DatasetReference",
											"parameters": {
												"vTableName": "@item().SheetName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SheetName": {
						"type": "array",
						"defaultValue": [
							{
								"SheetName": "D_Organization"
							},
							{
								"SheetName": "D_MBR_scope"
							},
							{
								"SheetName": "D_Currency"
							},
							{
								"SheetName": "D_Version"
							},
							{
								"SheetName": "D_EmployeeType"
							},
							{
								"SheetName": "D_LevelOfSeniority"
							},
							{
								"SheetName": "D_SoftwarePartner"
							},
							{
								"SheetName": "D_CostCenter"
							},
							{
								"SheetName": "D_ServiceProductionCategory"
							},
							{
								"SheetName": "D_Nature"
							}
						]
					}
				},
				"folder": {
					"name": "00DEV"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T10:38:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Load_Fact_Financials')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ocean_stg",
								"type": "DatasetReference"
							},
							"name": "getMBRStagingData"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimScenario"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimNature"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimOrganisation"
						},
						{
							"dataset": {
								"referenceName": "ds_fact_financials",
								"type": "DatasetReference"
							},
							"name": "getFactFinancials"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getFactDrivers"
						},
						{
							"dataset": {
								"referenceName": "ds_ocean_dwh",
								"type": "DatasetReference"
							},
							"name": "getDimKPI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_fact_financials",
								"type": "DatasetReference"
							},
							"name": "insertFactFinancials"
						},
						{
							"dataset": {
								"referenceName": "ds_fact_drivers",
								"type": "DatasetReference"
							},
							"name": "insertFactDrivers"
						}
					],
					"transformations": [
						{
							"name": "addYearMonthID",
							"description": "Add MonthYearID"
						},
						{
							"name": "joinDimScenario",
							"description": "Inner join with 'getDimScenario'"
						},
						{
							"name": "getOrganizationID"
						},
						{
							"name": "joinDimOrganisation",
							"description": "Inner join on 'joinDimNature' and 'getOrganizationID'"
						},
						{
							"name": "cleanColumns"
						},
						{
							"name": "joinFactFinancials"
						},
						{
							"name": "factFinancialsClean"
						},
						{
							"name": "insertOrUpdateColumns"
						},
						{
							"name": "insertOrUpdate"
						},
						{
							"name": "includesUpsert"
						},
						{
							"name": "cleanColumnsToUpsert"
						},
						{
							"name": "convertToInteger",
							"description": "Convert Surrogate Key to Integer"
						},
						{
							"name": "FINorKPI"
						},
						{
							"name": "joinDimNature"
						},
						{
							"name": "factDriversClean"
						},
						{
							"name": "joinFactKPI"
						},
						{
							"name": "upsertColumn"
						},
						{
							"name": "includesUpsertKPI"
						},
						{
							"name": "cleanColumnsToUpsertKPI"
						},
						{
							"name": "insertOrUpdateKPI"
						},
						{
							"name": "joinDimKPI"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pPipelineRunID as string",
						"}",
						"source(output(",
						"          BusinessUnit as string,",
						"          Scenario as string,",
						"          NatureID as integer,",
						"          Nature as string,",
						"          MonthYear as timestamp,",
						"          Value as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getMBRStagingData",
						"source(output(",
						"          Scenario_Name0 as string,",
						"          Scenario_Code0 as string,",
						"          Comment as string,",
						"          Scenario_Index as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimScenario",
						"source(output(",
						"          NatureGroupID as long,",
						"          NatureGroup as string,",
						"          NatureSubGroupID as long,",
						"          NatureSubGroup as string,",
						"          Nature as string,",
						"          NatureID as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimNature",
						"source(output(",
						"          {Business Unit} as string,",
						"          {MBR Scope} as string,",
						"          Area as string,",
						"          Zone as string,",
						"          {Keyrus Group} as string,",
						"          Total as string,",
						"          {MBR Scope_1} as string,",
						"          Management_hierarchy_1 as string,",
						"          Management_hierarchy_2 as string,",
						"          Management_hierarchy_3 as string,",
						"          Management_hierarchy_4 as string,",
						"          Currency_Name0 as string,",
						"          Currency_Code0 as string,",
						"          BusinessLine_Name as string,",
						"          Country_Name as string,",
						"          {Financial manager} as string,",
						"          {Managing Director} as string,",
						"          {MBR file user(s)} as string,",
						"          OrganisationID as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimOrganisation",
						"source(output(",
						"          FactFinID as long,",
						"          ScenarioID as integer,",
						"          NatureID as integer,",
						"          OrganisationID as integer,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          Value as double,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getFactFinancials",
						"source(output(",
						"          FactDriversID as long,",
						"          ScenarioID as integer,",
						"          KPIID as integer,",
						"          OrganisationID as integer,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          Value as double,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getFactDrivers",
						"source(output(",
						"          Index as long,",
						"          PeopleType as string,",
						"          PeopleTypeID as long,",
						"          KPI as string,",
						"          IsKPI as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getDimKPI",
						"getMBRStagingData derive(MonthYearID = toInteger(concat(toString(year(MonthYear)), lpad(toString(month(MonthYear)),2,'0'), '01')),",
						"          CreatedBy = $pPipelineRunID) ~> addYearMonthID",
						"addYearMonthID, getDimScenario join(Scenario == Scenario_Name0,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimScenario",
						"getDimOrganisation select(mapColumn(",
						"          {Business Unit},",
						"          OrganisationID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> getOrganizationID",
						"joinDimScenario, getOrganizationID join(BusinessUnit == {Business Unit},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimOrganisation",
						"joinDimOrganisation select(mapColumn(",
						"          ScenarioID = Scenario_Index,",
						"          OrganisationID,",
						"          NatureID,",
						"          MonthYearID,",
						"          MonthYear,",
						"          Value,",
						"          CreatedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanColumns",
						"joinDimNature, factFinancialsClean join(FINorKPI@FIN@ScenarioID == factFinancialsClean@ScenarioID",
						"     && getDimNature@NatureID == factFinancialsClean@NatureID",
						"     && FINorKPI@FIN@OrganisationID == factFinancialsClean@OrganisationID",
						"     && FINorKPI@FIN@MonthYearID == factFinancialsClean@MonthYearID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactFinancials",
						"getFactFinancials select(mapColumn(",
						"          ScenarioID,",
						"          NatureID,",
						"          OrganisationID,",
						"          MonthYearID,",
						"          Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> factFinancialsClean",
						"joinFactFinancials derive(InsertOrUpdate = iif(isNull(factFinancialsClean@ScenarioID) && isNull(factFinancialsClean@NatureID) && isNull(factFinancialsClean@OrganisationID) && isNull(factFinancialsClean@MonthYearID) \r",
						", 'I',\r",
						"iif(FINorKPI@FIN@Value == factFinancialsClean@Value, 'P','U')\r",
						")) ~> insertOrUpdateColumns",
						"cleanColumnsToUpsert alterRow(insertIf(InsertOrUpdate=='I'),",
						"     updateIf(InsertOrUpdate=='U')) ~> insertOrUpdate",
						"insertOrUpdateColumns filter(in(['I','U'],InsertOrUpdate)) ~> includesUpsert",
						"includesUpsert select(mapColumn(",
						"          ScenarioID = FINorKPI@FIN@ScenarioID,",
						"          OrganisationID = FINorKPI@FIN@OrganisationID,",
						"          NatureID = getDimNature@NatureID,",
						"          MonthYearID = FINorKPI@FIN@MonthYearID,",
						"          MonthYear,",
						"          Value = FINorKPI@FIN@Value,",
						"          InsertOrUpdate,",
						"          CreatedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanColumnsToUpsert",
						"cleanColumns derive(ScenarioID = toInteger(ScenarioID),",
						"          OrganisationID = toInteger(OrganisationID),",
						"          FactIndicator = iif(NatureID >= 372, 'KPI', 'FIN')) ~> convertToInteger",
						"convertToInteger split(FactIndicator == 'FIN',",
						"     disjoint: false) ~> FINorKPI@(FIN, KPI)",
						"FINorKPI@FIN, getDimNature join(FINorKPI@FIN@NatureID == getDimNature@NatureID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimNature",
						"getFactDrivers select(mapColumn(",
						"          ScenarioID,",
						"          KPIID,",
						"          OrganisationID,",
						"          MonthYearID,",
						"          Value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> factDriversClean",
						"joinDimKPI, factDriversClean join(FINorKPI@KPI@ScenarioID == factDriversClean@ScenarioID",
						"     && FINorKPI@KPI@OrganisationID == factDriversClean@OrganisationID",
						"     && Index == KPIID",
						"     && FINorKPI@KPI@MonthYearID == factDriversClean@MonthYearID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactKPI",
						"joinFactKPI derive(InsertOrUpdate = iif(isNull(factDriversClean@ScenarioID) && isNull(KPIID) && isNull(factDriversClean@OrganisationID) && isNull(factDriversClean@MonthYearID) , \r",
						"'I',iif(FINorKPI@KPI@Value == factDriversClean@Value, 'P','U'))) ~> upsertColumn",
						"upsertColumn filter(in(['I','U'],InsertOrUpdate)) ~> includesUpsertKPI",
						"includesUpsertKPI select(mapColumn(",
						"          ScenarioID = FINorKPI@KPI@ScenarioID,",
						"          KPIID = Index,",
						"          OrganisationID = FINorKPI@KPI@OrganisationID,",
						"          MonthYearID = FINorKPI@KPI@MonthYearID,",
						"          MonthYear,",
						"          Value = FINorKPI@KPI@Value,",
						"          InsertOrUpdate,",
						"          CreatedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanColumnsToUpsertKPI",
						"cleanColumnsToUpsertKPI alterRow(insertIf(InsertOrUpdate=='I'),",
						"     updateIf(InsertOrUpdate=='U')) ~> insertOrUpdateKPI",
						"FINorKPI@KPI, getDimKPI join(NatureID == Index,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimKPI",
						"insertOrUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FactFinID as long,",
						"          ScenarioID as integer,",
						"          NatureID as integer,",
						"          OrganisationID as integer,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          Value as double,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ScenarioID','NatureID','OrganisationID','MonthYearID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ScenarioID,",
						"          NatureID,",
						"          OrganisationID,",
						"          MonthYearID,",
						"          MonthYear,",
						"          Value,",
						"          CreatedBy",
						"     )) ~> insertFactFinancials",
						"insertOrUpdateKPI sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FactDriversID as long,",
						"          ScenarioID as integer,",
						"          KPIID as integer,",
						"          OrganisationID as integer,",
						"          MonthYearID as integer,",
						"          MonthYear as date,",
						"          Value as double,",
						"          CreatedOn as timestamp,",
						"          CreatedBy as string,",
						"          ModifiedOn as timestamp,",
						"          ModifiedBy as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ScenarioID,",
						"          KPIID,",
						"          OrganisationID,",
						"          MonthYearID,",
						"          MonthYear,",
						"          Value,",
						"          CreatedBy",
						"     )) ~> insertFactDrivers"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_all_mbr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01ODS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_mbr_pnl_data",
								"type": "DatasetReference"
							},
							"name": "getMBRData",
							"description": "Retrieve Actual CY,LY & Budget"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ocean_stg_nonecrypted",
								"type": "DatasetReference"
							},
							"name": "insertRawMBRData"
						}
					],
					"transformations": [
						{
							"name": "addMBRMetadata",
							"description": "BU_Code\nBU_Name\nMBR_Scope\nMBR_Month"
						},
						{
							"name": "removeEmptyColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pBU_Code as string,",
						"     pRawTableName as string,",
						"     pMBR_Scope as string,",
						"     pMBR_Month as string,",
						"     pBU_Name as string,",
						"     pCurrency_Code as string",
						"}",
						"source(output(",
						"          {_col0_} as string,",
						"          {_col1_} as string,",
						"          {_col2_} as string,",
						"          {_col3_} as string,",
						"          {_col4_} as string,",
						"          {_col5_} as string,",
						"          {_col6_} as string,",
						"          {_col7_} as string,",
						"          {_col8_} as string,",
						"          {_col9_} as string,",
						"          {_col10_} as string,",
						"          {_col11_} as string,",
						"          {_col12_} as string,",
						"          {_col13_} as string,",
						"          {_col14_} as string,",
						"          {_col15_} as string,",
						"          {_col16_} as string,",
						"          {_col17_} as string,",
						"          {_col18_} as string,",
						"          {_col19_} as string,",
						"          {_col20_} as string,",
						"          {_col21_} as string,",
						"          {_col22_} as string,",
						"          {_col23_} as string,",
						"          {_col24_} as string,",
						"          {_col25_} as string,",
						"          {_col26_} as string,",
						"          {_col27_} as string,",
						"          {_col28_} as string,",
						"          {_col29_} as string,",
						"          {_col30_} as string,",
						"          {_col31_} as string,",
						"          {_col32_} as string,",
						"          {_col33_} as string,",
						"          {_col34_} as string,",
						"          {_col35_} as string,",
						"          {_col36_} as string,",
						"          {_col37_} as string,",
						"          {_col38_} as string,",
						"          {_col39_} as string,",
						"          {_col40_} as string,",
						"          {_col41_} as string,",
						"          {_col42_} as string,",
						"          {_col43_} as string,",
						"          {_col44_} as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> getMBRData",
						"getMBRData derive(BU_Code = $pBU_Code,",
						"          BU_Name = $pBU_Name,",
						"          Currency_Code = $pCurrency_Code,",
						"          MBR_Scope = $pMBR_Scope,",
						"          MBR_Month = $pMBR_Month) ~> addMBRMetadata",
						"addMBRMetadata select(mapColumn(",
						"          {_col0_},",
						"          {_col1_},",
						"          {_col2_},",
						"          {_col4_},",
						"          {_col5_},",
						"          {_col6_},",
						"          {_col7_},",
						"          {_col8_},",
						"          {_col9_},",
						"          {_col10_},",
						"          {_col11_},",
						"          {_col12_},",
						"          {_col13_},",
						"          {_col14_},",
						"          {_col15_},",
						"          {_col16_},",
						"          {_col19_},",
						"          {_col20_},",
						"          {_col21_},",
						"          {_col22_},",
						"          {_col23_},",
						"          {_col24_},",
						"          {_col25_},",
						"          {_col26_},",
						"          {_col27_},",
						"          {_col28_},",
						"          {_col29_},",
						"          {_col30_},",
						"          {_col33_},",
						"          {_col34_},",
						"          {_col35_},",
						"          {_col36_},",
						"          {_col37_},",
						"          {_col38_},",
						"          {_col39_},",
						"          {_col40_},",
						"          {_col41_},",
						"          {_col42_},",
						"          {_col43_},",
						"          {_col44_},",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> removeEmptyColumns",
						"removeEmptyColumns sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Index as string,",
						"          Anaplant_Index as string,",
						"          PBI_Index as string,",
						"          K_Nature as string,",
						"          Actual_LY_01 as string,",
						"          Actual_LY_02 as string,",
						"          Actual_LY_03 as string,",
						"          Actual_LY_04 as string,",
						"          Actual_LY_05 as string,",
						"          Actual_LY_06 as string,",
						"          Actual_LY_07 as string,",
						"          Actual_LY_08 as string,",
						"          Actual_LY_09 as string,",
						"          Actual_LY_10 as string,",
						"          Actual_LY_11 as string,",
						"          Actual_LY_12 as string,",
						"          Budget_CY_01 as string,",
						"          Budget_CY_02 as string,",
						"          Budget_CY_03 as string,",
						"          Budget_CY_04 as string,",
						"          Budget_CY_05 as string,",
						"          Budget_CY_06 as string,",
						"          Budget_CY_07 as string,",
						"          Budget_CY_08 as string,",
						"          Budget_CY_09 as string,",
						"          Budget_CY_10 as string,",
						"          Budget_CY_11 as string,",
						"          Budget_CY_12 as string,",
						"          Actual_CY_01 as string,",
						"          Actual_CY_02 as string,",
						"          Actual_CY_03 as string,",
						"          Actual_CY_04 as string,",
						"          Actual_CY_05 as string,",
						"          Actual_CY_06 as string,",
						"          Actual_CY_07 as string,",
						"          Actual_CY_08 as string,",
						"          Actual_CY_09 as string,",
						"          Actual_CY_10 as string,",
						"          Actual_CY_11 as string,",
						"          Actual_CY_12 as string,",
						"          BU_Code as string,",
						"          BU_Name as string,",
						"          Currency_Code as string,",
						"          MBR_Scope as string,",
						"          MBR_Month as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Index = {_col0_},",
						"          Anaplant_Index = {_col1_},",
						"          PBI_Index = {_col2_},",
						"          K_Nature = {_col4_},",
						"          Actual_LY_01 = {_col5_},",
						"          Actual_LY_02 = {_col6_},",
						"          Actual_LY_03 = {_col7_},",
						"          Actual_LY_04 = {_col8_},",
						"          Actual_LY_05 = {_col9_},",
						"          Actual_LY_06 = {_col10_},",
						"          Actual_LY_07 = {_col11_},",
						"          Actual_LY_08 = {_col12_},",
						"          Actual_LY_09 = {_col13_},",
						"          Actual_LY_10 = {_col14_},",
						"          Actual_LY_11 = {_col15_},",
						"          Actual_LY_12 = {_col16_},",
						"          Budget_CY_01 = {_col19_},",
						"          Budget_CY_02 = {_col20_},",
						"          Budget_CY_03 = {_col21_},",
						"          Budget_CY_04 = {_col22_},",
						"          Budget_CY_05 = {_col23_},",
						"          Budget_CY_06 = {_col24_},",
						"          Budget_CY_07 = {_col25_},",
						"          Budget_CY_08 = {_col26_},",
						"          Budget_CY_09 = {_col27_},",
						"          Budget_CY_10 = {_col28_},",
						"          Budget_CY_11 = {_col29_},",
						"          Budget_CY_12 = {_col30_},",
						"          Actual_CY_01 = {_col33_},",
						"          Actual_CY_02 = {_col34_},",
						"          Actual_CY_03 = {_col35_},",
						"          Actual_CY_04 = {_col36_},",
						"          Actual_CY_05 = {_col37_},",
						"          Actual_CY_06 = {_col38_},",
						"          Actual_CY_07 = {_col39_},",
						"          Actual_CY_08 = {_col40_},",
						"          Actual_CY_09 = {_col41_},",
						"          Actual_CY_10 = {_col42_},",
						"          Actual_CY_11 = {_col43_},",
						"          Actual_CY_12 = {_col44_},",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month",
						"     )) ~> insertRawMBRData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_stg_financials')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference"
							},
							"name": "getMBRUnpvtData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stg_financials",
								"type": "DatasetReference"
							},
							"name": "insertMBRStagingData"
						}
					],
					"transformations": [
						{
							"name": "addColumns",
							"description": "Add Columns : \nScenario\nMonthYear"
						}
					],
					"scriptLines": [
						"parameters{",
						"     unpvtTableName as string",
						"}",
						"source(output(",
						"          Index as string,",
						"          Anaplant_Index as string,",
						"          PBI_Index as string,",
						"          K_Nature as string,",
						"          BU_Code as string,",
						"          BU_Name as string,",
						"          Currency_Code as string,",
						"          MBR_Scope as string,",
						"          MBR_Month as string,",
						"          Period as string,",
						"          Value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [ods].[{$unpvtTableName}]\"),",
						"     format: 'query') ~> getMBRUnpvtData",
						"getMBRUnpvtData derive(Scenario = case( like(Period, 'Actual%'),'Actual','Budget'),",
						"          MonthYear = case(like(Period,'%CY%'),\r",
						"toDate(concat(toString(year(toDate(MBR_Month))), '-',right(Period,2))),\r",
						"toDate(concat(toString(year(toDate(MBR_Month))-1), '-',right(Period,2)))),",
						"          Index = toInteger(Index),",
						"          Value = toFloat(Value)) ~> addColumns",
						"addColumns sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          BusinessUnit as string,",
						"          Scenario as string,",
						"          NatureID as integer,",
						"          Nature as string,",
						"          MonthYear as timestamp,",
						"          Value as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BusinessUnit = BU_Name,",
						"          Scenario,",
						"          NatureID = Index,",
						"          Nature = K_Nature,",
						"          MonthYear,",
						"          Value",
						"     )) ~> insertMBRStagingData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_unpvt_mbr_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01ODS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ocean_ods",
								"type": "DatasetReference"
							},
							"name": "getMBRData",
							"description": "Retrieve data from the raw MBR sql table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_unpvtdata_table",
								"type": "DatasetReference"
							},
							"name": "InsertUnpvtMBRData",
							"description": "Create and insert unpivot MBR data in the corresponding table"
						}
					],
					"transformations": [
						{
							"name": "UnpivotMBRData",
							"description": "Unpivot MBR Data to group by Period"
						}
					],
					"scriptLines": [
						"parameters{",
						"     RawTableName as string,",
						"     UnpivotTableName as string",
						"}",
						"source(output(",
						"          Index as string,",
						"          Anaplant_Index as string,",
						"          PBI_Index as string,",
						"          K_Nature as string,",
						"          Actual_LY_01 as string,",
						"          Actual_LY_02 as string,",
						"          Actual_LY_03 as string,",
						"          Actual_LY_04 as string,",
						"          Actual_LY_05 as string,",
						"          Actual_LY_06 as string,",
						"          Actual_LY_07 as string,",
						"          Actual_LY_08 as string,",
						"          Actual_LY_09 as string,",
						"          Actual_LY_10 as string,",
						"          Actual_LY_11 as string,",
						"          Actual_LY_12 as string,",
						"          Budget_CY_01 as string,",
						"          Budget_CY_02 as string,",
						"          Budget_CY_03 as string,",
						"          Budget_CY_04 as string,",
						"          Budget_CY_05 as string,",
						"          Budget_CY_06 as string,",
						"          Budget_CY_07 as string,",
						"          Budget_CY_08 as string,",
						"          Budget_CY_09 as string,",
						"          Budget_CY_10 as string,",
						"          Budget_CY_11 as string,",
						"          Budget_CY_12 as string,",
						"          Actual_CY_01 as string,",
						"          Actual_CY_02 as string,",
						"          Actual_CY_03 as string,",
						"          Actual_CY_04 as string,",
						"          Actual_CY_05 as string,",
						"          Actual_CY_06 as string,",
						"          Actual_CY_07 as string,",
						"          Actual_CY_08 as string,",
						"          Actual_CY_09 as string,",
						"          Actual_CY_10 as string,",
						"          Actual_CY_11 as string,",
						"          Actual_CY_12 as string,",
						"          BU_Code as string,",
						"          BU_Name as string,",
						"          Currency_Code as string,",
						"          MBR_Scope as string,",
						"          MBR_Month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> getMBRData",
						"getMBRData unpivot(output(",
						"          Period as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy(Index,",
						"          Anaplant_Index,",
						"          PBI_Index,",
						"          K_Nature,",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month),",
						"     lateral: false,",
						"     ignoreNullPivots: true) ~> UnpivotMBRData",
						"UnpivotMBRData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Index,",
						"          Anaplant_Index,",
						"          PBI_Index,",
						"          K_Nature,",
						"          BU_Code,",
						"          BU_Name,",
						"          Currency_Code,",
						"          MBR_Scope,",
						"          MBR_Month,",
						"          Period,",
						"          Value",
						"     )) ~> InsertUnpvtMBRData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_shrp_listoffiles')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01ODS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sharepoint_listofiles_xml",
								"type": "DatasetReference"
							},
							"name": "getListofFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sharepoint_json",
								"type": "DatasetReference"
							},
							"name": "createJSONListofFiles"
						}
					],
					"transformations": [
						{
							"name": "flattenXML"
						},
						{
							"name": "addFileName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pMBR_Scope as string",
						"}",
						"source(output(",
						"          {http://www.w3.org/2005/Atom,feed} as ({http://www.w3.org/2005/Atom,entry} as ({http://www.w3.org/2005/Atom,author} as ({http://www.w3.org/2005/Atom,name} as string), {http://www.w3.org/2005/Atom,category} as ({@scheme} as string, {@term} as string), {http://www.w3.org/2005/Atom,content} as ({@type} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,CheckInComment} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,CheckOutType} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as short, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,ContentTag} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,CustomizedPageStatus} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,ETag} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,Exists} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,IrmEnabled} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,Length} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as integer, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,Level} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,LinkingUri} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,LinkingUrl} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,MajorVersion} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as short, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,MinorVersion} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as boolean, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,Name} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,ServerRelativeUrl} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,TimeCreated} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as timestamp, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,TimeLastModified} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as timestamp, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,Title} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices,UIVersion} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as short, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string), {http://schemas.microsoft.com/ado/2007/08/dataservices,UIVersionLabel} as double, {http://schemas.microsoft.com/ado/2007/08/dataservices,UniqueId} as ({http://schemas.microsoft.com/ado/2007/08/dataservices,_value_} as string, {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,@type} as string))), {http://www.w3.org/2005/Atom,id} as string, {http://www.w3.org/2005/Atom,link} as ({@href} as string, {@rel} as string, {@title} as string, {@type} as string)[], {http://www.w3.org/2005/Atom,title} as string, {http://www.w3.org/2005/Atom,updated} as timestamp)[], {http://www.w3.org/2005/Atom,id} as string, {http://www.w3.org/2005/Atom,title} as string, {http://www.w3.org/2005/Atom,updated} as timestamp)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true,",
						"     validationMode: 'none',",
						"     namespaces: true) ~> getListofFiles",
						"getListofFiles foldDown(unroll({http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}),",
						"     mapColumn(",
						"          GetFileUrl = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,id},",
						"          LinkingUri = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,content}.{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties}.{http://schemas.microsoft.com/ado/2007/08/dataservices,LinkingUri},",
						"          LinkingUrl = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,content}.{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties}.{http://schemas.microsoft.com/ado/2007/08/dataservices,ServerRelativeUrl},",
						"          ServerRelativeUrl = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,content}.{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties}.{http://schemas.microsoft.com/ado/2007/08/dataservices,ServerRelativeUrl},",
						"          Name = {http://www.w3.org/2005/Atom,feed}.{http://www.w3.org/2005/Atom,entry}.{http://www.w3.org/2005/Atom,content}.{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata,properties}.{http://schemas.microsoft.com/ado/2007/08/dataservices,Name}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenXML",
						"flattenXML derive(FileName = concat('toloadSharepoint/02ListFilesToCopy/ListFilesToLoad_',$pMBR_Scope,'.json'),",
						"          GetFileUrl = concat(replace(GetFileUrl,'https://keyrusgroup.sharepoint.com',''),'/$value')) ~> addFileName",
						"addFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LinkingUri as string,",
						"          LinkingUrl as string,",
						"          ServerRelativeUrl as string,",
						"          Name as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> createJSONListofFiles"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sharepoint_listofiles_xml')]",
				"[concat(variables('factoryId'), '/datasets/ds_sharepoint_json')]"
			]
		}
	]
}